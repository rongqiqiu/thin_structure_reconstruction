// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: export_data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "export_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace stereo_export {

namespace {

const ::google::protobuf::Descriptor* Vector3d_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vector3d_reflection_ = NULL;
const ::google::protobuf::Descriptor* Vector3f_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vector3f_reflection_ = NULL;
const ::google::protobuf::Descriptor* Matrix3x3d_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Matrix3x3d_reflection_ = NULL;
const ::google::protobuf::Descriptor* Vector2i_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vector2i_reflection_ = NULL;
const ::google::protobuf::Descriptor* HalfOpenBox2i_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HalfOpenBox2i_reflection_ = NULL;
const ::google::protobuf::Descriptor* StereoRasterPoints_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StereoRasterPoints_reflection_ = NULL;
const ::google::protobuf::Descriptor* CameraModel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CameraModel_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImageCameraMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImageCameraMetadata_reflection_ = NULL;
const ::google::protobuf::Descriptor* StereoRasterMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StereoRasterMetadata_reflection_ = NULL;
const ::google::protobuf::Descriptor* DatasetMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DatasetMetadata_reflection_ = NULL;
const ::google::protobuf::Descriptor* Metadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Metadata_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_export_5fdata_2eproto() {
  protobuf_AddDesc_export_5fdata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "export_data.proto");
  GOOGLE_CHECK(file != NULL);
  Vector3d_descriptor_ = file->message_type(0);
  static const int Vector3d_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3d, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3d, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3d, z_),
  };
  Vector3d_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vector3d_descriptor_,
      Vector3d::default_instance_,
      Vector3d_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3d, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3d, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vector3d));
  Vector3f_descriptor_ = file->message_type(1);
  static const int Vector3f_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3f, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3f, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3f, z_),
  };
  Vector3f_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vector3f_descriptor_,
      Vector3f::default_instance_,
      Vector3f_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3f, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3f, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vector3f));
  Matrix3x3d_descriptor_ = file->message_type(2);
  static const int Matrix3x3d_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matrix3x3d, e00_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matrix3x3d, e01_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matrix3x3d, e02_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matrix3x3d, e10_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matrix3x3d, e11_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matrix3x3d, e12_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matrix3x3d, e20_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matrix3x3d, e21_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matrix3x3d, e22_),
  };
  Matrix3x3d_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Matrix3x3d_descriptor_,
      Matrix3x3d::default_instance_,
      Matrix3x3d_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matrix3x3d, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matrix3x3d, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Matrix3x3d));
  Vector2i_descriptor_ = file->message_type(3);
  static const int Vector2i_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2i, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2i, y_),
  };
  Vector2i_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vector2i_descriptor_,
      Vector2i::default_instance_,
      Vector2i_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2i, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2i, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vector2i));
  HalfOpenBox2i_descriptor_ = file->message_type(4);
  static const int HalfOpenBox2i_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HalfOpenBox2i, box_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HalfOpenBox2i, box_max_),
  };
  HalfOpenBox2i_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HalfOpenBox2i_descriptor_,
      HalfOpenBox2i::default_instance_,
      HalfOpenBox2i_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HalfOpenBox2i, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HalfOpenBox2i, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HalfOpenBox2i));
  StereoRasterPoints_descriptor_ = file->message_type(5);
  static const int StereoRasterPoints_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StereoRasterPoints, w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StereoRasterPoints, h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StereoRasterPoints, center_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StereoRasterPoints, points_),
  };
  StereoRasterPoints_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StereoRasterPoints_descriptor_,
      StereoRasterPoints::default_instance_,
      StereoRasterPoints_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StereoRasterPoints, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StereoRasterPoints, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StereoRasterPoints));
  CameraModel_descriptor_ = file->message_type(6);
  static const int CameraModel_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraModel, r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraModel, t_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraModel, k1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraModel, k2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraModel, fx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraModel, fy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraModel, fs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraModel, cx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraModel, cy_),
  };
  CameraModel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CameraModel_descriptor_,
      CameraModel::default_instance_,
      CameraModel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraModel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraModel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CameraModel));
  ImageCameraMetadata_descriptor_ = file->message_type(7);
  static const int ImageCameraMetadata_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageCameraMetadata, image_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageCameraMetadata, image_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageCameraMetadata, original_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageCameraMetadata, bounds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageCameraMetadata, camera_model_),
  };
  ImageCameraMetadata_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ImageCameraMetadata_descriptor_,
      ImageCameraMetadata::default_instance_,
      ImageCameraMetadata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageCameraMetadata, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageCameraMetadata, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ImageCameraMetadata));
  StereoRasterMetadata_descriptor_ = file->message_type(8);
  static const int StereoRasterMetadata_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StereoRasterMetadata, stereo_raster_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StereoRasterMetadata, image_id_),
  };
  StereoRasterMetadata_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StereoRasterMetadata_descriptor_,
      StereoRasterMetadata::default_instance_,
      StereoRasterMetadata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StereoRasterMetadata, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StereoRasterMetadata, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StereoRasterMetadata));
  DatasetMetadata_descriptor_ = file->message_type(9);
  static const int DatasetMetadata_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetMetadata, latitude_degrees_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetMetadata, longitude_degrees_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetMetadata, radius_meters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetMetadata, image_camera_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetMetadata, stereo_raster_),
  };
  DatasetMetadata_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DatasetMetadata_descriptor_,
      DatasetMetadata::default_instance_,
      DatasetMetadata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetMetadata, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetMetadata, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DatasetMetadata));
  Metadata_descriptor_ = file->message_type(10);
  static const int Metadata_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, dataset_),
  };
  Metadata_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Metadata_descriptor_,
      Metadata::default_instance_,
      Metadata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Metadata));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_export_5fdata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vector3d_descriptor_, &Vector3d::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vector3f_descriptor_, &Vector3f::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Matrix3x3d_descriptor_, &Matrix3x3d::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vector2i_descriptor_, &Vector2i::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HalfOpenBox2i_descriptor_, &HalfOpenBox2i::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StereoRasterPoints_descriptor_, &StereoRasterPoints::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CameraModel_descriptor_, &CameraModel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ImageCameraMetadata_descriptor_, &ImageCameraMetadata::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StereoRasterMetadata_descriptor_, &StereoRasterMetadata::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DatasetMetadata_descriptor_, &DatasetMetadata::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Metadata_descriptor_, &Metadata::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_export_5fdata_2eproto() {
  delete Vector3d::default_instance_;
  delete Vector3d_reflection_;
  delete Vector3f::default_instance_;
  delete Vector3f_reflection_;
  delete Matrix3x3d::default_instance_;
  delete Matrix3x3d_reflection_;
  delete Vector2i::default_instance_;
  delete Vector2i_reflection_;
  delete HalfOpenBox2i::default_instance_;
  delete HalfOpenBox2i_reflection_;
  delete StereoRasterPoints::default_instance_;
  delete StereoRasterPoints_reflection_;
  delete CameraModel::default_instance_;
  delete CameraModel_reflection_;
  delete ImageCameraMetadata::default_instance_;
  delete ImageCameraMetadata_reflection_;
  delete StereoRasterMetadata::default_instance_;
  delete StereoRasterMetadata_reflection_;
  delete DatasetMetadata::default_instance_;
  delete DatasetMetadata_reflection_;
  delete Metadata::default_instance_;
  delete Metadata_reflection_;
}

void protobuf_AddDesc_export_5fdata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021export_data.proto\022\rstereo_export\"+\n\010Ve"
    "ctor3d\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\""
    "+\n\010Vector3f\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003"
    " \001(\002\"\201\001\n\nMatrix3x3d\022\013\n\003e00\030\001 \001(\001\022\013\n\003e01\030"
    "\002 \001(\001\022\013\n\003e02\030\003 \001(\001\022\013\n\003e10\030\004 \001(\001\022\013\n\003e11\030\005"
    " \001(\001\022\013\n\003e12\030\006 \001(\001\022\013\n\003e20\030\007 \001(\001\022\013\n\003e21\030\010 "
    "\001(\001\022\013\n\003e22\030\t \001(\001\" \n\010Vector2i\022\t\n\001x\030\001 \001(\005\022"
    "\t\n\001y\030\002 \001(\005\"c\n\rHalfOpenBox2i\022(\n\007box_min\030\001"
    " \001(\0132\027.stereo_export.Vector2i\022(\n\007box_max"
    "\030\002 \001(\0132\027.stereo_export.Vector2i\"|\n\022Stere"
    "oRasterPoints\022\t\n\001w\030\001 \002(\005\022\t\n\001h\030\002 \002(\005\022\'\n\006c"
    "enter\030\003 \002(\0132\027.stereo_export.Vector3d\022\'\n\006"
    "points\030\004 \003(\0132\027.stereo_export.Vector3f\"\253\001"
    "\n\013CameraModel\022$\n\001r\030\001 \001(\0132\031.stereo_export"
    ".Matrix3x3d\022\"\n\001t\030\002 \001(\0132\027.stereo_export.V"
    "ector3d\022\n\n\002k1\030\003 \001(\001\022\n\n\002k2\030\004 \001(\001\022\n\n\002fx\030\005 "
    "\001(\001\022\n\n\002fy\030\006 \001(\001\022\n\n\002fs\030\007 \001(\001\022\n\n\002cx\030\010 \001(\001\022"
    "\n\n\002cy\030\t \001(\001\"\313\001\n\023ImageCameraMetadata\022\022\n\ni"
    "mage_path\030\001 \001(\t\022\020\n\010image_id\030\002 \001(\t\022.\n\rori"
    "ginal_size\030\003 \001(\0132\027.stereo_export.Vector2"
    "i\022,\n\006bounds\030\004 \001(\0132\034.stereo_export.HalfOp"
    "enBox2i\0220\n\014camera_model\030\005 \001(\0132\032.stereo_e"
    "xport.CameraModel\"D\n\024StereoRasterMetadat"
    "a\022\032\n\022stereo_raster_path\030\001 \001(\t\022\020\n\010image_i"
    "d\030\002 \001(\t\"\323\001\n\017DatasetMetadata\022\030\n\020latitude_"
    "degrees\030\001 \001(\001\022\031\n\021longitude_degrees\030\002 \001(\001"
    "\022\025\n\rradius_meters\030\003 \001(\001\0228\n\014image_camera\030"
    "\004 \003(\0132\".stereo_export.ImageCameraMetadat"
    "a\022:\n\rstereo_raster\030\005 \003(\0132#.stereo_export"
    ".StereoRasterMetadata\";\n\010Metadata\022/\n\007dat"
    "aset\030\001 \003(\0132\036.stereo_export.DatasetMetada"
    "ta", 1242);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "export_data.proto", &protobuf_RegisterTypes);
  Vector3d::default_instance_ = new Vector3d();
  Vector3f::default_instance_ = new Vector3f();
  Matrix3x3d::default_instance_ = new Matrix3x3d();
  Vector2i::default_instance_ = new Vector2i();
  HalfOpenBox2i::default_instance_ = new HalfOpenBox2i();
  StereoRasterPoints::default_instance_ = new StereoRasterPoints();
  CameraModel::default_instance_ = new CameraModel();
  ImageCameraMetadata::default_instance_ = new ImageCameraMetadata();
  StereoRasterMetadata::default_instance_ = new StereoRasterMetadata();
  DatasetMetadata::default_instance_ = new DatasetMetadata();
  Metadata::default_instance_ = new Metadata();
  Vector3d::default_instance_->InitAsDefaultInstance();
  Vector3f::default_instance_->InitAsDefaultInstance();
  Matrix3x3d::default_instance_->InitAsDefaultInstance();
  Vector2i::default_instance_->InitAsDefaultInstance();
  HalfOpenBox2i::default_instance_->InitAsDefaultInstance();
  StereoRasterPoints::default_instance_->InitAsDefaultInstance();
  CameraModel::default_instance_->InitAsDefaultInstance();
  ImageCameraMetadata::default_instance_->InitAsDefaultInstance();
  StereoRasterMetadata::default_instance_->InitAsDefaultInstance();
  DatasetMetadata::default_instance_->InitAsDefaultInstance();
  Metadata::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_export_5fdata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_export_5fdata_2eproto {
  StaticDescriptorInitializer_export_5fdata_2eproto() {
    protobuf_AddDesc_export_5fdata_2eproto();
  }
} static_descriptor_initializer_export_5fdata_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Vector3d::kXFieldNumber;
const int Vector3d::kYFieldNumber;
const int Vector3d::kZFieldNumber;
#endif  // !_MSC_VER

Vector3d::Vector3d()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stereo_export.Vector3d)
}

void Vector3d::InitAsDefaultInstance() {
}

Vector3d::Vector3d(const Vector3d& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:stereo_export.Vector3d)
}

void Vector3d::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vector3d::~Vector3d() {
  // @@protoc_insertion_point(destructor:stereo_export.Vector3d)
  SharedDtor();
}

void Vector3d::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vector3d::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector3d::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vector3d_descriptor_;
}

const Vector3d& Vector3d::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_export_5fdata_2eproto();
  return *default_instance_;
}

Vector3d* Vector3d::default_instance_ = NULL;

Vector3d* Vector3d::New() const {
  return new Vector3d;
}

void Vector3d::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Vector3d*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, z_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vector3d::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stereo_export.Vector3d)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // optional double y = 2;
      case 2: {
        if (tag == 17) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_z;
        break;
      }

      // optional double z = 3;
      case 3: {
        if (tag == 25) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stereo_export.Vector3d)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stereo_export.Vector3d)
  return false;
#undef DO_
}

void Vector3d::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stereo_export.Vector3d)
  // optional double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:stereo_export.Vector3d)
}

::google::protobuf::uint8* Vector3d::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:stereo_export.Vector3d)
  // optional double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional double z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stereo_export.Vector3d)
  return target;
}

int Vector3d::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // optional double z = 3;
    if (has_z()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector3d::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vector3d* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vector3d*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vector3d::MergeFrom(const Vector3d& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vector3d::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3d::CopyFrom(const Vector3d& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3d::IsInitialized() const {

  return true;
}

void Vector3d::Swap(Vector3d* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vector3d::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vector3d_descriptor_;
  metadata.reflection = Vector3d_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Vector3f::kXFieldNumber;
const int Vector3f::kYFieldNumber;
const int Vector3f::kZFieldNumber;
#endif  // !_MSC_VER

Vector3f::Vector3f()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stereo_export.Vector3f)
}

void Vector3f::InitAsDefaultInstance() {
}

Vector3f::Vector3f(const Vector3f& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:stereo_export.Vector3f)
}

void Vector3f::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vector3f::~Vector3f() {
  // @@protoc_insertion_point(destructor:stereo_export.Vector3f)
  SharedDtor();
}

void Vector3f::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vector3f::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector3f::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vector3f_descriptor_;
}

const Vector3f& Vector3f::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_export_5fdata_2eproto();
  return *default_instance_;
}

Vector3f* Vector3f::default_instance_ = NULL;

Vector3f* Vector3f::New() const {
  return new Vector3f;
}

void Vector3f::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Vector3f*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, z_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vector3f::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stereo_export.Vector3f)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // optional float z = 3;
      case 3: {
        if (tag == 29) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stereo_export.Vector3f)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stereo_export.Vector3f)
  return false;
#undef DO_
}

void Vector3f::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stereo_export.Vector3f)
  // optional float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:stereo_export.Vector3f)
}

::google::protobuf::uint8* Vector3f::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:stereo_export.Vector3f)
  // optional float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stereo_export.Vector3f)
  return target;
}

int Vector3f::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector3f::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vector3f* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vector3f*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vector3f::MergeFrom(const Vector3f& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vector3f::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3f::CopyFrom(const Vector3f& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3f::IsInitialized() const {

  return true;
}

void Vector3f::Swap(Vector3f* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vector3f::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vector3f_descriptor_;
  metadata.reflection = Vector3f_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Matrix3x3d::kE00FieldNumber;
const int Matrix3x3d::kE01FieldNumber;
const int Matrix3x3d::kE02FieldNumber;
const int Matrix3x3d::kE10FieldNumber;
const int Matrix3x3d::kE11FieldNumber;
const int Matrix3x3d::kE12FieldNumber;
const int Matrix3x3d::kE20FieldNumber;
const int Matrix3x3d::kE21FieldNumber;
const int Matrix3x3d::kE22FieldNumber;
#endif  // !_MSC_VER

Matrix3x3d::Matrix3x3d()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stereo_export.Matrix3x3d)
}

void Matrix3x3d::InitAsDefaultInstance() {
}

Matrix3x3d::Matrix3x3d(const Matrix3x3d& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:stereo_export.Matrix3x3d)
}

void Matrix3x3d::SharedCtor() {
  _cached_size_ = 0;
  e00_ = 0;
  e01_ = 0;
  e02_ = 0;
  e10_ = 0;
  e11_ = 0;
  e12_ = 0;
  e20_ = 0;
  e21_ = 0;
  e22_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Matrix3x3d::~Matrix3x3d() {
  // @@protoc_insertion_point(destructor:stereo_export.Matrix3x3d)
  SharedDtor();
}

void Matrix3x3d::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Matrix3x3d::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Matrix3x3d::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Matrix3x3d_descriptor_;
}

const Matrix3x3d& Matrix3x3d::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_export_5fdata_2eproto();
  return *default_instance_;
}

Matrix3x3d* Matrix3x3d::default_instance_ = NULL;

Matrix3x3d* Matrix3x3d::New() const {
  return new Matrix3x3d;
}

void Matrix3x3d::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Matrix3x3d*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(e00_, e21_);
  }
  e22_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Matrix3x3d::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stereo_export.Matrix3x3d)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double e00 = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &e00_)));
          set_has_e00();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_e01;
        break;
      }

      // optional double e01 = 2;
      case 2: {
        if (tag == 17) {
         parse_e01:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &e01_)));
          set_has_e01();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_e02;
        break;
      }

      // optional double e02 = 3;
      case 3: {
        if (tag == 25) {
         parse_e02:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &e02_)));
          set_has_e02();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_e10;
        break;
      }

      // optional double e10 = 4;
      case 4: {
        if (tag == 33) {
         parse_e10:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &e10_)));
          set_has_e10();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_e11;
        break;
      }

      // optional double e11 = 5;
      case 5: {
        if (tag == 41) {
         parse_e11:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &e11_)));
          set_has_e11();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_e12;
        break;
      }

      // optional double e12 = 6;
      case 6: {
        if (tag == 49) {
         parse_e12:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &e12_)));
          set_has_e12();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_e20;
        break;
      }

      // optional double e20 = 7;
      case 7: {
        if (tag == 57) {
         parse_e20:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &e20_)));
          set_has_e20();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_e21;
        break;
      }

      // optional double e21 = 8;
      case 8: {
        if (tag == 65) {
         parse_e21:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &e21_)));
          set_has_e21();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_e22;
        break;
      }

      // optional double e22 = 9;
      case 9: {
        if (tag == 73) {
         parse_e22:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &e22_)));
          set_has_e22();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stereo_export.Matrix3x3d)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stereo_export.Matrix3x3d)
  return false;
#undef DO_
}

void Matrix3x3d::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stereo_export.Matrix3x3d)
  // optional double e00 = 1;
  if (has_e00()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->e00(), output);
  }

  // optional double e01 = 2;
  if (has_e01()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->e01(), output);
  }

  // optional double e02 = 3;
  if (has_e02()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->e02(), output);
  }

  // optional double e10 = 4;
  if (has_e10()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->e10(), output);
  }

  // optional double e11 = 5;
  if (has_e11()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->e11(), output);
  }

  // optional double e12 = 6;
  if (has_e12()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->e12(), output);
  }

  // optional double e20 = 7;
  if (has_e20()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->e20(), output);
  }

  // optional double e21 = 8;
  if (has_e21()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->e21(), output);
  }

  // optional double e22 = 9;
  if (has_e22()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->e22(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:stereo_export.Matrix3x3d)
}

::google::protobuf::uint8* Matrix3x3d::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:stereo_export.Matrix3x3d)
  // optional double e00 = 1;
  if (has_e00()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->e00(), target);
  }

  // optional double e01 = 2;
  if (has_e01()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->e01(), target);
  }

  // optional double e02 = 3;
  if (has_e02()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->e02(), target);
  }

  // optional double e10 = 4;
  if (has_e10()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->e10(), target);
  }

  // optional double e11 = 5;
  if (has_e11()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->e11(), target);
  }

  // optional double e12 = 6;
  if (has_e12()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->e12(), target);
  }

  // optional double e20 = 7;
  if (has_e20()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->e20(), target);
  }

  // optional double e21 = 8;
  if (has_e21()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->e21(), target);
  }

  // optional double e22 = 9;
  if (has_e22()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->e22(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stereo_export.Matrix3x3d)
  return target;
}

int Matrix3x3d::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double e00 = 1;
    if (has_e00()) {
      total_size += 1 + 8;
    }

    // optional double e01 = 2;
    if (has_e01()) {
      total_size += 1 + 8;
    }

    // optional double e02 = 3;
    if (has_e02()) {
      total_size += 1 + 8;
    }

    // optional double e10 = 4;
    if (has_e10()) {
      total_size += 1 + 8;
    }

    // optional double e11 = 5;
    if (has_e11()) {
      total_size += 1 + 8;
    }

    // optional double e12 = 6;
    if (has_e12()) {
      total_size += 1 + 8;
    }

    // optional double e20 = 7;
    if (has_e20()) {
      total_size += 1 + 8;
    }

    // optional double e21 = 8;
    if (has_e21()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double e22 = 9;
    if (has_e22()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Matrix3x3d::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Matrix3x3d* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Matrix3x3d*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Matrix3x3d::MergeFrom(const Matrix3x3d& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_e00()) {
      set_e00(from.e00());
    }
    if (from.has_e01()) {
      set_e01(from.e01());
    }
    if (from.has_e02()) {
      set_e02(from.e02());
    }
    if (from.has_e10()) {
      set_e10(from.e10());
    }
    if (from.has_e11()) {
      set_e11(from.e11());
    }
    if (from.has_e12()) {
      set_e12(from.e12());
    }
    if (from.has_e20()) {
      set_e20(from.e20());
    }
    if (from.has_e21()) {
      set_e21(from.e21());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_e22()) {
      set_e22(from.e22());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Matrix3x3d::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Matrix3x3d::CopyFrom(const Matrix3x3d& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Matrix3x3d::IsInitialized() const {

  return true;
}

void Matrix3x3d::Swap(Matrix3x3d* other) {
  if (other != this) {
    std::swap(e00_, other->e00_);
    std::swap(e01_, other->e01_);
    std::swap(e02_, other->e02_);
    std::swap(e10_, other->e10_);
    std::swap(e11_, other->e11_);
    std::swap(e12_, other->e12_);
    std::swap(e20_, other->e20_);
    std::swap(e21_, other->e21_);
    std::swap(e22_, other->e22_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Matrix3x3d::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Matrix3x3d_descriptor_;
  metadata.reflection = Matrix3x3d_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Vector2i::kXFieldNumber;
const int Vector2i::kYFieldNumber;
#endif  // !_MSC_VER

Vector2i::Vector2i()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stereo_export.Vector2i)
}

void Vector2i::InitAsDefaultInstance() {
}

Vector2i::Vector2i(const Vector2i& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:stereo_export.Vector2i)
}

void Vector2i::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vector2i::~Vector2i() {
  // @@protoc_insertion_point(destructor:stereo_export.Vector2i)
  SharedDtor();
}

void Vector2i::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vector2i::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector2i::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vector2i_descriptor_;
}

const Vector2i& Vector2i::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_export_5fdata_2eproto();
  return *default_instance_;
}

Vector2i* Vector2i::default_instance_ = NULL;

Vector2i* Vector2i::New() const {
  return new Vector2i;
}

void Vector2i::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Vector2i*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, y_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vector2i::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stereo_export.Vector2i)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 x = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // optional int32 y = 2;
      case 2: {
        if (tag == 16) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stereo_export.Vector2i)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stereo_export.Vector2i)
  return false;
#undef DO_
}

void Vector2i::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stereo_export.Vector2i)
  // optional int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // optional int32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:stereo_export.Vector2i)
}

::google::protobuf::uint8* Vector2i::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:stereo_export.Vector2i)
  // optional int32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // optional int32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stereo_export.Vector2i)
  return target;
}

int Vector2i::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector2i::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vector2i* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vector2i*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vector2i::MergeFrom(const Vector2i& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vector2i::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector2i::CopyFrom(const Vector2i& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector2i::IsInitialized() const {

  return true;
}

void Vector2i::Swap(Vector2i* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vector2i::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vector2i_descriptor_;
  metadata.reflection = Vector2i_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HalfOpenBox2i::kBoxMinFieldNumber;
const int HalfOpenBox2i::kBoxMaxFieldNumber;
#endif  // !_MSC_VER

HalfOpenBox2i::HalfOpenBox2i()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stereo_export.HalfOpenBox2i)
}

void HalfOpenBox2i::InitAsDefaultInstance() {
  box_min_ = const_cast< ::stereo_export::Vector2i*>(&::stereo_export::Vector2i::default_instance());
  box_max_ = const_cast< ::stereo_export::Vector2i*>(&::stereo_export::Vector2i::default_instance());
}

HalfOpenBox2i::HalfOpenBox2i(const HalfOpenBox2i& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:stereo_export.HalfOpenBox2i)
}

void HalfOpenBox2i::SharedCtor() {
  _cached_size_ = 0;
  box_min_ = NULL;
  box_max_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HalfOpenBox2i::~HalfOpenBox2i() {
  // @@protoc_insertion_point(destructor:stereo_export.HalfOpenBox2i)
  SharedDtor();
}

void HalfOpenBox2i::SharedDtor() {
  if (this != default_instance_) {
    delete box_min_;
    delete box_max_;
  }
}

void HalfOpenBox2i::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HalfOpenBox2i::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HalfOpenBox2i_descriptor_;
}

const HalfOpenBox2i& HalfOpenBox2i::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_export_5fdata_2eproto();
  return *default_instance_;
}

HalfOpenBox2i* HalfOpenBox2i::default_instance_ = NULL;

HalfOpenBox2i* HalfOpenBox2i::New() const {
  return new HalfOpenBox2i;
}

void HalfOpenBox2i::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_box_min()) {
      if (box_min_ != NULL) box_min_->::stereo_export::Vector2i::Clear();
    }
    if (has_box_max()) {
      if (box_max_ != NULL) box_max_->::stereo_export::Vector2i::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HalfOpenBox2i::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stereo_export.HalfOpenBox2i)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .stereo_export.Vector2i box_min = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_box_min()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_box_max;
        break;
      }

      // optional .stereo_export.Vector2i box_max = 2;
      case 2: {
        if (tag == 18) {
         parse_box_max:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_box_max()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stereo_export.HalfOpenBox2i)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stereo_export.HalfOpenBox2i)
  return false;
#undef DO_
}

void HalfOpenBox2i::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stereo_export.HalfOpenBox2i)
  // optional .stereo_export.Vector2i box_min = 1;
  if (has_box_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->box_min(), output);
  }

  // optional .stereo_export.Vector2i box_max = 2;
  if (has_box_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->box_max(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:stereo_export.HalfOpenBox2i)
}

::google::protobuf::uint8* HalfOpenBox2i::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:stereo_export.HalfOpenBox2i)
  // optional .stereo_export.Vector2i box_min = 1;
  if (has_box_min()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->box_min(), target);
  }

  // optional .stereo_export.Vector2i box_max = 2;
  if (has_box_max()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->box_max(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stereo_export.HalfOpenBox2i)
  return target;
}

int HalfOpenBox2i::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .stereo_export.Vector2i box_min = 1;
    if (has_box_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->box_min());
    }

    // optional .stereo_export.Vector2i box_max = 2;
    if (has_box_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->box_max());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HalfOpenBox2i::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HalfOpenBox2i* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HalfOpenBox2i*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HalfOpenBox2i::MergeFrom(const HalfOpenBox2i& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_box_min()) {
      mutable_box_min()->::stereo_export::Vector2i::MergeFrom(from.box_min());
    }
    if (from.has_box_max()) {
      mutable_box_max()->::stereo_export::Vector2i::MergeFrom(from.box_max());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HalfOpenBox2i::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HalfOpenBox2i::CopyFrom(const HalfOpenBox2i& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HalfOpenBox2i::IsInitialized() const {

  return true;
}

void HalfOpenBox2i::Swap(HalfOpenBox2i* other) {
  if (other != this) {
    std::swap(box_min_, other->box_min_);
    std::swap(box_max_, other->box_max_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HalfOpenBox2i::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HalfOpenBox2i_descriptor_;
  metadata.reflection = HalfOpenBox2i_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StereoRasterPoints::kWFieldNumber;
const int StereoRasterPoints::kHFieldNumber;
const int StereoRasterPoints::kCenterFieldNumber;
const int StereoRasterPoints::kPointsFieldNumber;
#endif  // !_MSC_VER

StereoRasterPoints::StereoRasterPoints()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stereo_export.StereoRasterPoints)
}

void StereoRasterPoints::InitAsDefaultInstance() {
  center_ = const_cast< ::stereo_export::Vector3d*>(&::stereo_export::Vector3d::default_instance());
}

StereoRasterPoints::StereoRasterPoints(const StereoRasterPoints& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:stereo_export.StereoRasterPoints)
}

void StereoRasterPoints::SharedCtor() {
  _cached_size_ = 0;
  w_ = 0;
  h_ = 0;
  center_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StereoRasterPoints::~StereoRasterPoints() {
  // @@protoc_insertion_point(destructor:stereo_export.StereoRasterPoints)
  SharedDtor();
}

void StereoRasterPoints::SharedDtor() {
  if (this != default_instance_) {
    delete center_;
  }
}

void StereoRasterPoints::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StereoRasterPoints::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StereoRasterPoints_descriptor_;
}

const StereoRasterPoints& StereoRasterPoints::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_export_5fdata_2eproto();
  return *default_instance_;
}

StereoRasterPoints* StereoRasterPoints::default_instance_ = NULL;

StereoRasterPoints* StereoRasterPoints::New() const {
  return new StereoRasterPoints;
}

void StereoRasterPoints::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StereoRasterPoints*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(w_, h_);
    if (has_center()) {
      if (center_ != NULL) center_->::stereo_export::Vector3d::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  points_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StereoRasterPoints::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stereo_export.StereoRasterPoints)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 w = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &w_)));
          set_has_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_h;
        break;
      }

      // required int32 h = 2;
      case 2: {
        if (tag == 16) {
         parse_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &h_)));
          set_has_h();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_center;
        break;
      }

      // required .stereo_export.Vector3d center = 3;
      case 3: {
        if (tag == 26) {
         parse_center:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_center()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_points;
        break;
      }

      // repeated .stereo_export.Vector3f points = 4;
      case 4: {
        if (tag == 34) {
         parse_points:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_points()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_points;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stereo_export.StereoRasterPoints)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stereo_export.StereoRasterPoints)
  return false;
#undef DO_
}

void StereoRasterPoints::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stereo_export.StereoRasterPoints)
  // required int32 w = 1;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->w(), output);
  }

  // required int32 h = 2;
  if (has_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->h(), output);
  }

  // required .stereo_export.Vector3d center = 3;
  if (has_center()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->center(), output);
  }

  // repeated .stereo_export.Vector3f points = 4;
  for (int i = 0; i < this->points_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->points(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:stereo_export.StereoRasterPoints)
}

::google::protobuf::uint8* StereoRasterPoints::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:stereo_export.StereoRasterPoints)
  // required int32 w = 1;
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->w(), target);
  }

  // required int32 h = 2;
  if (has_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->h(), target);
  }

  // required .stereo_export.Vector3d center = 3;
  if (has_center()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->center(), target);
  }

  // repeated .stereo_export.Vector3f points = 4;
  for (int i = 0; i < this->points_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->points(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stereo_export.StereoRasterPoints)
  return target;
}

int StereoRasterPoints::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 w = 1;
    if (has_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->w());
    }

    // required int32 h = 2;
    if (has_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->h());
    }

    // required .stereo_export.Vector3d center = 3;
    if (has_center()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->center());
    }

  }
  // repeated .stereo_export.Vector3f points = 4;
  total_size += 1 * this->points_size();
  for (int i = 0; i < this->points_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->points(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StereoRasterPoints::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StereoRasterPoints* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StereoRasterPoints*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StereoRasterPoints::MergeFrom(const StereoRasterPoints& from) {
  GOOGLE_CHECK_NE(&from, this);
  points_.MergeFrom(from.points_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_w()) {
      set_w(from.w());
    }
    if (from.has_h()) {
      set_h(from.h());
    }
    if (from.has_center()) {
      mutable_center()->::stereo_export::Vector3d::MergeFrom(from.center());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StereoRasterPoints::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StereoRasterPoints::CopyFrom(const StereoRasterPoints& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StereoRasterPoints::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void StereoRasterPoints::Swap(StereoRasterPoints* other) {
  if (other != this) {
    std::swap(w_, other->w_);
    std::swap(h_, other->h_);
    std::swap(center_, other->center_);
    points_.Swap(&other->points_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StereoRasterPoints::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StereoRasterPoints_descriptor_;
  metadata.reflection = StereoRasterPoints_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CameraModel::kRFieldNumber;
const int CameraModel::kTFieldNumber;
const int CameraModel::kK1FieldNumber;
const int CameraModel::kK2FieldNumber;
const int CameraModel::kFxFieldNumber;
const int CameraModel::kFyFieldNumber;
const int CameraModel::kFsFieldNumber;
const int CameraModel::kCxFieldNumber;
const int CameraModel::kCyFieldNumber;
#endif  // !_MSC_VER

CameraModel::CameraModel()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stereo_export.CameraModel)
}

void CameraModel::InitAsDefaultInstance() {
  r_ = const_cast< ::stereo_export::Matrix3x3d*>(&::stereo_export::Matrix3x3d::default_instance());
  t_ = const_cast< ::stereo_export::Vector3d*>(&::stereo_export::Vector3d::default_instance());
}

CameraModel::CameraModel(const CameraModel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:stereo_export.CameraModel)
}

void CameraModel::SharedCtor() {
  _cached_size_ = 0;
  r_ = NULL;
  t_ = NULL;
  k1_ = 0;
  k2_ = 0;
  fx_ = 0;
  fy_ = 0;
  fs_ = 0;
  cx_ = 0;
  cy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CameraModel::~CameraModel() {
  // @@protoc_insertion_point(destructor:stereo_export.CameraModel)
  SharedDtor();
}

void CameraModel::SharedDtor() {
  if (this != default_instance_) {
    delete r_;
    delete t_;
  }
}

void CameraModel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraModel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CameraModel_descriptor_;
}

const CameraModel& CameraModel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_export_5fdata_2eproto();
  return *default_instance_;
}

CameraModel* CameraModel::default_instance_ = NULL;

CameraModel* CameraModel::New() const {
  return new CameraModel;
}

void CameraModel::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CameraModel*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(k1_, cx_);
    if (has_r()) {
      if (r_ != NULL) r_->::stereo_export::Matrix3x3d::Clear();
    }
    if (has_t()) {
      if (t_ != NULL) t_->::stereo_export::Vector3d::Clear();
    }
  }
  cy_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CameraModel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stereo_export.CameraModel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .stereo_export.Matrix3x3d r = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_r()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_t;
        break;
      }

      // optional .stereo_export.Vector3d t = 2;
      case 2: {
        if (tag == 18) {
         parse_t:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_t()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_k1;
        break;
      }

      // optional double k1 = 3;
      case 3: {
        if (tag == 25) {
         parse_k1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &k1_)));
          set_has_k1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_k2;
        break;
      }

      // optional double k2 = 4;
      case 4: {
        if (tag == 33) {
         parse_k2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &k2_)));
          set_has_k2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_fx;
        break;
      }

      // optional double fx = 5;
      case 5: {
        if (tag == 41) {
         parse_fx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fx_)));
          set_has_fx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_fy;
        break;
      }

      // optional double fy = 6;
      case 6: {
        if (tag == 49) {
         parse_fy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fy_)));
          set_has_fy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_fs;
        break;
      }

      // optional double fs = 7;
      case 7: {
        if (tag == 57) {
         parse_fs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fs_)));
          set_has_fs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_cx;
        break;
      }

      // optional double cx = 8;
      case 8: {
        if (tag == 65) {
         parse_cx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cx_)));
          set_has_cx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_cy;
        break;
      }

      // optional double cy = 9;
      case 9: {
        if (tag == 73) {
         parse_cy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cy_)));
          set_has_cy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stereo_export.CameraModel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stereo_export.CameraModel)
  return false;
#undef DO_
}

void CameraModel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stereo_export.CameraModel)
  // optional .stereo_export.Matrix3x3d r = 1;
  if (has_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->r(), output);
  }

  // optional .stereo_export.Vector3d t = 2;
  if (has_t()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->t(), output);
  }

  // optional double k1 = 3;
  if (has_k1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->k1(), output);
  }

  // optional double k2 = 4;
  if (has_k2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->k2(), output);
  }

  // optional double fx = 5;
  if (has_fx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->fx(), output);
  }

  // optional double fy = 6;
  if (has_fy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->fy(), output);
  }

  // optional double fs = 7;
  if (has_fs()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->fs(), output);
  }

  // optional double cx = 8;
  if (has_cx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->cx(), output);
  }

  // optional double cy = 9;
  if (has_cy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->cy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:stereo_export.CameraModel)
}

::google::protobuf::uint8* CameraModel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:stereo_export.CameraModel)
  // optional .stereo_export.Matrix3x3d r = 1;
  if (has_r()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->r(), target);
  }

  // optional .stereo_export.Vector3d t = 2;
  if (has_t()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->t(), target);
  }

  // optional double k1 = 3;
  if (has_k1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->k1(), target);
  }

  // optional double k2 = 4;
  if (has_k2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->k2(), target);
  }

  // optional double fx = 5;
  if (has_fx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->fx(), target);
  }

  // optional double fy = 6;
  if (has_fy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->fy(), target);
  }

  // optional double fs = 7;
  if (has_fs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->fs(), target);
  }

  // optional double cx = 8;
  if (has_cx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->cx(), target);
  }

  // optional double cy = 9;
  if (has_cy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->cy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stereo_export.CameraModel)
  return target;
}

int CameraModel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .stereo_export.Matrix3x3d r = 1;
    if (has_r()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->r());
    }

    // optional .stereo_export.Vector3d t = 2;
    if (has_t()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->t());
    }

    // optional double k1 = 3;
    if (has_k1()) {
      total_size += 1 + 8;
    }

    // optional double k2 = 4;
    if (has_k2()) {
      total_size += 1 + 8;
    }

    // optional double fx = 5;
    if (has_fx()) {
      total_size += 1 + 8;
    }

    // optional double fy = 6;
    if (has_fy()) {
      total_size += 1 + 8;
    }

    // optional double fs = 7;
    if (has_fs()) {
      total_size += 1 + 8;
    }

    // optional double cx = 8;
    if (has_cx()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double cy = 9;
    if (has_cy()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraModel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CameraModel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CameraModel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CameraModel::MergeFrom(const CameraModel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_r()) {
      mutable_r()->::stereo_export::Matrix3x3d::MergeFrom(from.r());
    }
    if (from.has_t()) {
      mutable_t()->::stereo_export::Vector3d::MergeFrom(from.t());
    }
    if (from.has_k1()) {
      set_k1(from.k1());
    }
    if (from.has_k2()) {
      set_k2(from.k2());
    }
    if (from.has_fx()) {
      set_fx(from.fx());
    }
    if (from.has_fy()) {
      set_fy(from.fy());
    }
    if (from.has_fs()) {
      set_fs(from.fs());
    }
    if (from.has_cx()) {
      set_cx(from.cx());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cy()) {
      set_cy(from.cy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CameraModel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraModel::CopyFrom(const CameraModel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraModel::IsInitialized() const {

  return true;
}

void CameraModel::Swap(CameraModel* other) {
  if (other != this) {
    std::swap(r_, other->r_);
    std::swap(t_, other->t_);
    std::swap(k1_, other->k1_);
    std::swap(k2_, other->k2_);
    std::swap(fx_, other->fx_);
    std::swap(fy_, other->fy_);
    std::swap(fs_, other->fs_);
    std::swap(cx_, other->cx_);
    std::swap(cy_, other->cy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CameraModel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CameraModel_descriptor_;
  metadata.reflection = CameraModel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ImageCameraMetadata::kImagePathFieldNumber;
const int ImageCameraMetadata::kImageIdFieldNumber;
const int ImageCameraMetadata::kOriginalSizeFieldNumber;
const int ImageCameraMetadata::kBoundsFieldNumber;
const int ImageCameraMetadata::kCameraModelFieldNumber;
#endif  // !_MSC_VER

ImageCameraMetadata::ImageCameraMetadata()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stereo_export.ImageCameraMetadata)
}

void ImageCameraMetadata::InitAsDefaultInstance() {
  original_size_ = const_cast< ::stereo_export::Vector2i*>(&::stereo_export::Vector2i::default_instance());
  bounds_ = const_cast< ::stereo_export::HalfOpenBox2i*>(&::stereo_export::HalfOpenBox2i::default_instance());
  camera_model_ = const_cast< ::stereo_export::CameraModel*>(&::stereo_export::CameraModel::default_instance());
}

ImageCameraMetadata::ImageCameraMetadata(const ImageCameraMetadata& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:stereo_export.ImageCameraMetadata)
}

void ImageCameraMetadata::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  image_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  original_size_ = NULL;
  bounds_ = NULL;
  camera_model_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImageCameraMetadata::~ImageCameraMetadata() {
  // @@protoc_insertion_point(destructor:stereo_export.ImageCameraMetadata)
  SharedDtor();
}

void ImageCameraMetadata::SharedDtor() {
  if (image_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete image_path_;
  }
  if (image_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete image_id_;
  }
  if (this != default_instance_) {
    delete original_size_;
    delete bounds_;
    delete camera_model_;
  }
}

void ImageCameraMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageCameraMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageCameraMetadata_descriptor_;
}

const ImageCameraMetadata& ImageCameraMetadata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_export_5fdata_2eproto();
  return *default_instance_;
}

ImageCameraMetadata* ImageCameraMetadata::default_instance_ = NULL;

ImageCameraMetadata* ImageCameraMetadata::New() const {
  return new ImageCameraMetadata;
}

void ImageCameraMetadata::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_image_path()) {
      if (image_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        image_path_->clear();
      }
    }
    if (has_image_id()) {
      if (image_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        image_id_->clear();
      }
    }
    if (has_original_size()) {
      if (original_size_ != NULL) original_size_->::stereo_export::Vector2i::Clear();
    }
    if (has_bounds()) {
      if (bounds_ != NULL) bounds_->::stereo_export::HalfOpenBox2i::Clear();
    }
    if (has_camera_model()) {
      if (camera_model_ != NULL) camera_model_->::stereo_export::CameraModel::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ImageCameraMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stereo_export.ImageCameraMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string image_path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->image_path().data(), this->image_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "image_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_image_id;
        break;
      }

      // optional string image_id = 2;
      case 2: {
        if (tag == 18) {
         parse_image_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->image_id().data(), this->image_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "image_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_original_size;
        break;
      }

      // optional .stereo_export.Vector2i original_size = 3;
      case 3: {
        if (tag == 26) {
         parse_original_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_original_size()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_bounds;
        break;
      }

      // optional .stereo_export.HalfOpenBox2i bounds = 4;
      case 4: {
        if (tag == 34) {
         parse_bounds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bounds()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_camera_model;
        break;
      }

      // optional .stereo_export.CameraModel camera_model = 5;
      case 5: {
        if (tag == 42) {
         parse_camera_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_camera_model()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stereo_export.ImageCameraMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stereo_export.ImageCameraMetadata)
  return false;
#undef DO_
}

void ImageCameraMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stereo_export.ImageCameraMetadata)
  // optional string image_path = 1;
  if (has_image_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image_path().data(), this->image_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "image_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->image_path(), output);
  }

  // optional string image_id = 2;
  if (has_image_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image_id().data(), this->image_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "image_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->image_id(), output);
  }

  // optional .stereo_export.Vector2i original_size = 3;
  if (has_original_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->original_size(), output);
  }

  // optional .stereo_export.HalfOpenBox2i bounds = 4;
  if (has_bounds()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->bounds(), output);
  }

  // optional .stereo_export.CameraModel camera_model = 5;
  if (has_camera_model()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->camera_model(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:stereo_export.ImageCameraMetadata)
}

::google::protobuf::uint8* ImageCameraMetadata::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:stereo_export.ImageCameraMetadata)
  // optional string image_path = 1;
  if (has_image_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image_path().data(), this->image_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "image_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->image_path(), target);
  }

  // optional string image_id = 2;
  if (has_image_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image_id().data(), this->image_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "image_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->image_id(), target);
  }

  // optional .stereo_export.Vector2i original_size = 3;
  if (has_original_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->original_size(), target);
  }

  // optional .stereo_export.HalfOpenBox2i bounds = 4;
  if (has_bounds()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->bounds(), target);
  }

  // optional .stereo_export.CameraModel camera_model = 5;
  if (has_camera_model()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->camera_model(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stereo_export.ImageCameraMetadata)
  return target;
}

int ImageCameraMetadata::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string image_path = 1;
    if (has_image_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image_path());
    }

    // optional string image_id = 2;
    if (has_image_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image_id());
    }

    // optional .stereo_export.Vector2i original_size = 3;
    if (has_original_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->original_size());
    }

    // optional .stereo_export.HalfOpenBox2i bounds = 4;
    if (has_bounds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bounds());
    }

    // optional .stereo_export.CameraModel camera_model = 5;
    if (has_camera_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->camera_model());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageCameraMetadata::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ImageCameraMetadata* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ImageCameraMetadata*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ImageCameraMetadata::MergeFrom(const ImageCameraMetadata& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_image_path()) {
      set_image_path(from.image_path());
    }
    if (from.has_image_id()) {
      set_image_id(from.image_id());
    }
    if (from.has_original_size()) {
      mutable_original_size()->::stereo_export::Vector2i::MergeFrom(from.original_size());
    }
    if (from.has_bounds()) {
      mutable_bounds()->::stereo_export::HalfOpenBox2i::MergeFrom(from.bounds());
    }
    if (from.has_camera_model()) {
      mutable_camera_model()->::stereo_export::CameraModel::MergeFrom(from.camera_model());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ImageCameraMetadata::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageCameraMetadata::CopyFrom(const ImageCameraMetadata& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageCameraMetadata::IsInitialized() const {

  return true;
}

void ImageCameraMetadata::Swap(ImageCameraMetadata* other) {
  if (other != this) {
    std::swap(image_path_, other->image_path_);
    std::swap(image_id_, other->image_id_);
    std::swap(original_size_, other->original_size_);
    std::swap(bounds_, other->bounds_);
    std::swap(camera_model_, other->camera_model_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ImageCameraMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImageCameraMetadata_descriptor_;
  metadata.reflection = ImageCameraMetadata_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StereoRasterMetadata::kStereoRasterPathFieldNumber;
const int StereoRasterMetadata::kImageIdFieldNumber;
#endif  // !_MSC_VER

StereoRasterMetadata::StereoRasterMetadata()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stereo_export.StereoRasterMetadata)
}

void StereoRasterMetadata::InitAsDefaultInstance() {
}

StereoRasterMetadata::StereoRasterMetadata(const StereoRasterMetadata& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:stereo_export.StereoRasterMetadata)
}

void StereoRasterMetadata::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  stereo_raster_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StereoRasterMetadata::~StereoRasterMetadata() {
  // @@protoc_insertion_point(destructor:stereo_export.StereoRasterMetadata)
  SharedDtor();
}

void StereoRasterMetadata::SharedDtor() {
  if (stereo_raster_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete stereo_raster_path_;
  }
  if (image_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete image_id_;
  }
  if (this != default_instance_) {
  }
}

void StereoRasterMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StereoRasterMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StereoRasterMetadata_descriptor_;
}

const StereoRasterMetadata& StereoRasterMetadata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_export_5fdata_2eproto();
  return *default_instance_;
}

StereoRasterMetadata* StereoRasterMetadata::default_instance_ = NULL;

StereoRasterMetadata* StereoRasterMetadata::New() const {
  return new StereoRasterMetadata;
}

void StereoRasterMetadata::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_stereo_raster_path()) {
      if (stereo_raster_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        stereo_raster_path_->clear();
      }
    }
    if (has_image_id()) {
      if (image_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        image_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StereoRasterMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stereo_export.StereoRasterMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string stereo_raster_path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stereo_raster_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stereo_raster_path().data(), this->stereo_raster_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "stereo_raster_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_image_id;
        break;
      }

      // optional string image_id = 2;
      case 2: {
        if (tag == 18) {
         parse_image_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->image_id().data(), this->image_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "image_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stereo_export.StereoRasterMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stereo_export.StereoRasterMetadata)
  return false;
#undef DO_
}

void StereoRasterMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stereo_export.StereoRasterMetadata)
  // optional string stereo_raster_path = 1;
  if (has_stereo_raster_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stereo_raster_path().data(), this->stereo_raster_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stereo_raster_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->stereo_raster_path(), output);
  }

  // optional string image_id = 2;
  if (has_image_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image_id().data(), this->image_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "image_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->image_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:stereo_export.StereoRasterMetadata)
}

::google::protobuf::uint8* StereoRasterMetadata::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:stereo_export.StereoRasterMetadata)
  // optional string stereo_raster_path = 1;
  if (has_stereo_raster_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stereo_raster_path().data(), this->stereo_raster_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stereo_raster_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stereo_raster_path(), target);
  }

  // optional string image_id = 2;
  if (has_image_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image_id().data(), this->image_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "image_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->image_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stereo_export.StereoRasterMetadata)
  return target;
}

int StereoRasterMetadata::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string stereo_raster_path = 1;
    if (has_stereo_raster_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stereo_raster_path());
    }

    // optional string image_id = 2;
    if (has_image_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StereoRasterMetadata::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StereoRasterMetadata* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StereoRasterMetadata*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StereoRasterMetadata::MergeFrom(const StereoRasterMetadata& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stereo_raster_path()) {
      set_stereo_raster_path(from.stereo_raster_path());
    }
    if (from.has_image_id()) {
      set_image_id(from.image_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StereoRasterMetadata::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StereoRasterMetadata::CopyFrom(const StereoRasterMetadata& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StereoRasterMetadata::IsInitialized() const {

  return true;
}

void StereoRasterMetadata::Swap(StereoRasterMetadata* other) {
  if (other != this) {
    std::swap(stereo_raster_path_, other->stereo_raster_path_);
    std::swap(image_id_, other->image_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StereoRasterMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StereoRasterMetadata_descriptor_;
  metadata.reflection = StereoRasterMetadata_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DatasetMetadata::kLatitudeDegreesFieldNumber;
const int DatasetMetadata::kLongitudeDegreesFieldNumber;
const int DatasetMetadata::kRadiusMetersFieldNumber;
const int DatasetMetadata::kImageCameraFieldNumber;
const int DatasetMetadata::kStereoRasterFieldNumber;
#endif  // !_MSC_VER

DatasetMetadata::DatasetMetadata()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stereo_export.DatasetMetadata)
}

void DatasetMetadata::InitAsDefaultInstance() {
}

DatasetMetadata::DatasetMetadata(const DatasetMetadata& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:stereo_export.DatasetMetadata)
}

void DatasetMetadata::SharedCtor() {
  _cached_size_ = 0;
  latitude_degrees_ = 0;
  longitude_degrees_ = 0;
  radius_meters_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DatasetMetadata::~DatasetMetadata() {
  // @@protoc_insertion_point(destructor:stereo_export.DatasetMetadata)
  SharedDtor();
}

void DatasetMetadata::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DatasetMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DatasetMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DatasetMetadata_descriptor_;
}

const DatasetMetadata& DatasetMetadata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_export_5fdata_2eproto();
  return *default_instance_;
}

DatasetMetadata* DatasetMetadata::default_instance_ = NULL;

DatasetMetadata* DatasetMetadata::New() const {
  return new DatasetMetadata;
}

void DatasetMetadata::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DatasetMetadata*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(latitude_degrees_, radius_meters_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  image_camera_.Clear();
  stereo_raster_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DatasetMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stereo_export.DatasetMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double latitude_degrees = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_degrees_)));
          set_has_latitude_degrees();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_longitude_degrees;
        break;
      }

      // optional double longitude_degrees = 2;
      case 2: {
        if (tag == 17) {
         parse_longitude_degrees:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_degrees_)));
          set_has_longitude_degrees();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_radius_meters;
        break;
      }

      // optional double radius_meters = 3;
      case 3: {
        if (tag == 25) {
         parse_radius_meters:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radius_meters_)));
          set_has_radius_meters();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_image_camera;
        break;
      }

      // repeated .stereo_export.ImageCameraMetadata image_camera = 4;
      case 4: {
        if (tag == 34) {
         parse_image_camera:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_image_camera()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_image_camera;
        if (input->ExpectTag(42)) goto parse_stereo_raster;
        break;
      }

      // repeated .stereo_export.StereoRasterMetadata stereo_raster = 5;
      case 5: {
        if (tag == 42) {
         parse_stereo_raster:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stereo_raster()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_stereo_raster;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stereo_export.DatasetMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stereo_export.DatasetMetadata)
  return false;
#undef DO_
}

void DatasetMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stereo_export.DatasetMetadata)
  // optional double latitude_degrees = 1;
  if (has_latitude_degrees()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->latitude_degrees(), output);
  }

  // optional double longitude_degrees = 2;
  if (has_longitude_degrees()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->longitude_degrees(), output);
  }

  // optional double radius_meters = 3;
  if (has_radius_meters()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->radius_meters(), output);
  }

  // repeated .stereo_export.ImageCameraMetadata image_camera = 4;
  for (int i = 0; i < this->image_camera_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->image_camera(i), output);
  }

  // repeated .stereo_export.StereoRasterMetadata stereo_raster = 5;
  for (int i = 0; i < this->stereo_raster_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->stereo_raster(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:stereo_export.DatasetMetadata)
}

::google::protobuf::uint8* DatasetMetadata::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:stereo_export.DatasetMetadata)
  // optional double latitude_degrees = 1;
  if (has_latitude_degrees()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->latitude_degrees(), target);
  }

  // optional double longitude_degrees = 2;
  if (has_longitude_degrees()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->longitude_degrees(), target);
  }

  // optional double radius_meters = 3;
  if (has_radius_meters()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->radius_meters(), target);
  }

  // repeated .stereo_export.ImageCameraMetadata image_camera = 4;
  for (int i = 0; i < this->image_camera_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->image_camera(i), target);
  }

  // repeated .stereo_export.StereoRasterMetadata stereo_raster = 5;
  for (int i = 0; i < this->stereo_raster_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->stereo_raster(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stereo_export.DatasetMetadata)
  return target;
}

int DatasetMetadata::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double latitude_degrees = 1;
    if (has_latitude_degrees()) {
      total_size += 1 + 8;
    }

    // optional double longitude_degrees = 2;
    if (has_longitude_degrees()) {
      total_size += 1 + 8;
    }

    // optional double radius_meters = 3;
    if (has_radius_meters()) {
      total_size += 1 + 8;
    }

  }
  // repeated .stereo_export.ImageCameraMetadata image_camera = 4;
  total_size += 1 * this->image_camera_size();
  for (int i = 0; i < this->image_camera_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->image_camera(i));
  }

  // repeated .stereo_export.StereoRasterMetadata stereo_raster = 5;
  total_size += 1 * this->stereo_raster_size();
  for (int i = 0; i < this->stereo_raster_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stereo_raster(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DatasetMetadata::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DatasetMetadata* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DatasetMetadata*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DatasetMetadata::MergeFrom(const DatasetMetadata& from) {
  GOOGLE_CHECK_NE(&from, this);
  image_camera_.MergeFrom(from.image_camera_);
  stereo_raster_.MergeFrom(from.stereo_raster_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_latitude_degrees()) {
      set_latitude_degrees(from.latitude_degrees());
    }
    if (from.has_longitude_degrees()) {
      set_longitude_degrees(from.longitude_degrees());
    }
    if (from.has_radius_meters()) {
      set_radius_meters(from.radius_meters());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DatasetMetadata::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DatasetMetadata::CopyFrom(const DatasetMetadata& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatasetMetadata::IsInitialized() const {

  return true;
}

void DatasetMetadata::Swap(DatasetMetadata* other) {
  if (other != this) {
    std::swap(latitude_degrees_, other->latitude_degrees_);
    std::swap(longitude_degrees_, other->longitude_degrees_);
    std::swap(radius_meters_, other->radius_meters_);
    image_camera_.Swap(&other->image_camera_);
    stereo_raster_.Swap(&other->stereo_raster_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DatasetMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DatasetMetadata_descriptor_;
  metadata.reflection = DatasetMetadata_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Metadata::kDatasetFieldNumber;
#endif  // !_MSC_VER

Metadata::Metadata()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stereo_export.Metadata)
}

void Metadata::InitAsDefaultInstance() {
}

Metadata::Metadata(const Metadata& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:stereo_export.Metadata)
}

void Metadata::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Metadata::~Metadata() {
  // @@protoc_insertion_point(destructor:stereo_export.Metadata)
  SharedDtor();
}

void Metadata::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Metadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Metadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Metadata_descriptor_;
}

const Metadata& Metadata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_export_5fdata_2eproto();
  return *default_instance_;
}

Metadata* Metadata::default_instance_ = NULL;

Metadata* Metadata::New() const {
  return new Metadata;
}

void Metadata::Clear() {
  dataset_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Metadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stereo_export.Metadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .stereo_export.DatasetMetadata dataset = 1;
      case 1: {
        if (tag == 10) {
         parse_dataset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dataset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_dataset;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stereo_export.Metadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stereo_export.Metadata)
  return false;
#undef DO_
}

void Metadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stereo_export.Metadata)
  // repeated .stereo_export.DatasetMetadata dataset = 1;
  for (int i = 0; i < this->dataset_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dataset(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:stereo_export.Metadata)
}

::google::protobuf::uint8* Metadata::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:stereo_export.Metadata)
  // repeated .stereo_export.DatasetMetadata dataset = 1;
  for (int i = 0; i < this->dataset_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->dataset(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stereo_export.Metadata)
  return target;
}

int Metadata::ByteSize() const {
  int total_size = 0;

  // repeated .stereo_export.DatasetMetadata dataset = 1;
  total_size += 1 * this->dataset_size();
  for (int i = 0; i < this->dataset_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dataset(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Metadata::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Metadata* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Metadata*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Metadata::MergeFrom(const Metadata& from) {
  GOOGLE_CHECK_NE(&from, this);
  dataset_.MergeFrom(from.dataset_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Metadata::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Metadata::CopyFrom(const Metadata& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metadata::IsInitialized() const {

  return true;
}

void Metadata::Swap(Metadata* other) {
  if (other != this) {
    dataset_.Swap(&other->dataset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Metadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Metadata_descriptor_;
  metadata.reflection = Metadata_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace stereo_export

// @@protoc_insertion_point(global_scope)
