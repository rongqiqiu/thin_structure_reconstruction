// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: export_data.proto

#ifndef PROTOBUF_export_5fdata_2eproto__INCLUDED
#define PROTOBUF_export_5fdata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace stereo_export {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_export_5fdata_2eproto();
void protobuf_AssignDesc_export_5fdata_2eproto();
void protobuf_ShutdownFile_export_5fdata_2eproto();

class Vector3d;
class Vector3f;
class Matrix3x3d;
class Vector2i;
class HalfOpenBox2i;
class StereoRasterPoints;
class CameraModel;
class ImageCameraMetadata;
class StereoRasterMetadata;
class DatasetMetadata;
class Metadata;

// ===================================================================

class Vector3d : public ::google::protobuf::Message {
 public:
  Vector3d();
  virtual ~Vector3d();

  Vector3d(const Vector3d& from);

  inline Vector3d& operator=(const Vector3d& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector3d& default_instance();

  void Swap(Vector3d* other);

  // implements Message ----------------------------------------------

  Vector3d* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vector3d& from);
  void MergeFrom(const Vector3d& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline double x() const;
  inline void set_x(double value);

  // optional double y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline double y() const;
  inline void set_y(double value);

  // optional double z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline double z() const;
  inline void set_z(double value);

  // @@protoc_insertion_point(class_scope:stereo_export.Vector3d)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double x_;
  double y_;
  double z_;
  friend void  protobuf_AddDesc_export_5fdata_2eproto();
  friend void protobuf_AssignDesc_export_5fdata_2eproto();
  friend void protobuf_ShutdownFile_export_5fdata_2eproto();

  void InitAsDefaultInstance();
  static Vector3d* default_instance_;
};
// -------------------------------------------------------------------

class Vector3f : public ::google::protobuf::Message {
 public:
  Vector3f();
  virtual ~Vector3f();

  Vector3f(const Vector3f& from);

  inline Vector3f& operator=(const Vector3f& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector3f& default_instance();

  void Swap(Vector3f* other);

  // implements Message ----------------------------------------------

  Vector3f* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vector3f& from);
  void MergeFrom(const Vector3f& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // optional float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // optional float z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline float z() const;
  inline void set_z(float value);

  // @@protoc_insertion_point(class_scope:stereo_export.Vector3f)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float x_;
  float y_;
  float z_;
  friend void  protobuf_AddDesc_export_5fdata_2eproto();
  friend void protobuf_AssignDesc_export_5fdata_2eproto();
  friend void protobuf_ShutdownFile_export_5fdata_2eproto();

  void InitAsDefaultInstance();
  static Vector3f* default_instance_;
};
// -------------------------------------------------------------------

class Matrix3x3d : public ::google::protobuf::Message {
 public:
  Matrix3x3d();
  virtual ~Matrix3x3d();

  Matrix3x3d(const Matrix3x3d& from);

  inline Matrix3x3d& operator=(const Matrix3x3d& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Matrix3x3d& default_instance();

  void Swap(Matrix3x3d* other);

  // implements Message ----------------------------------------------

  Matrix3x3d* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Matrix3x3d& from);
  void MergeFrom(const Matrix3x3d& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double e00 = 1;
  inline bool has_e00() const;
  inline void clear_e00();
  static const int kE00FieldNumber = 1;
  inline double e00() const;
  inline void set_e00(double value);

  // optional double e01 = 2;
  inline bool has_e01() const;
  inline void clear_e01();
  static const int kE01FieldNumber = 2;
  inline double e01() const;
  inline void set_e01(double value);

  // optional double e02 = 3;
  inline bool has_e02() const;
  inline void clear_e02();
  static const int kE02FieldNumber = 3;
  inline double e02() const;
  inline void set_e02(double value);

  // optional double e10 = 4;
  inline bool has_e10() const;
  inline void clear_e10();
  static const int kE10FieldNumber = 4;
  inline double e10() const;
  inline void set_e10(double value);

  // optional double e11 = 5;
  inline bool has_e11() const;
  inline void clear_e11();
  static const int kE11FieldNumber = 5;
  inline double e11() const;
  inline void set_e11(double value);

  // optional double e12 = 6;
  inline bool has_e12() const;
  inline void clear_e12();
  static const int kE12FieldNumber = 6;
  inline double e12() const;
  inline void set_e12(double value);

  // optional double e20 = 7;
  inline bool has_e20() const;
  inline void clear_e20();
  static const int kE20FieldNumber = 7;
  inline double e20() const;
  inline void set_e20(double value);

  // optional double e21 = 8;
  inline bool has_e21() const;
  inline void clear_e21();
  static const int kE21FieldNumber = 8;
  inline double e21() const;
  inline void set_e21(double value);

  // optional double e22 = 9;
  inline bool has_e22() const;
  inline void clear_e22();
  static const int kE22FieldNumber = 9;
  inline double e22() const;
  inline void set_e22(double value);

  // @@protoc_insertion_point(class_scope:stereo_export.Matrix3x3d)
 private:
  inline void set_has_e00();
  inline void clear_has_e00();
  inline void set_has_e01();
  inline void clear_has_e01();
  inline void set_has_e02();
  inline void clear_has_e02();
  inline void set_has_e10();
  inline void clear_has_e10();
  inline void set_has_e11();
  inline void clear_has_e11();
  inline void set_has_e12();
  inline void clear_has_e12();
  inline void set_has_e20();
  inline void clear_has_e20();
  inline void set_has_e21();
  inline void clear_has_e21();
  inline void set_has_e22();
  inline void clear_has_e22();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double e00_;
  double e01_;
  double e02_;
  double e10_;
  double e11_;
  double e12_;
  double e20_;
  double e21_;
  double e22_;
  friend void  protobuf_AddDesc_export_5fdata_2eproto();
  friend void protobuf_AssignDesc_export_5fdata_2eproto();
  friend void protobuf_ShutdownFile_export_5fdata_2eproto();

  void InitAsDefaultInstance();
  static Matrix3x3d* default_instance_;
};
// -------------------------------------------------------------------

class Vector2i : public ::google::protobuf::Message {
 public:
  Vector2i();
  virtual ~Vector2i();

  Vector2i(const Vector2i& from);

  inline Vector2i& operator=(const Vector2i& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector2i& default_instance();

  void Swap(Vector2i* other);

  // implements Message ----------------------------------------------

  Vector2i* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vector2i& from);
  void MergeFrom(const Vector2i& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);

  // optional int32 y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:stereo_export.Vector2i)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  friend void  protobuf_AddDesc_export_5fdata_2eproto();
  friend void protobuf_AssignDesc_export_5fdata_2eproto();
  friend void protobuf_ShutdownFile_export_5fdata_2eproto();

  void InitAsDefaultInstance();
  static Vector2i* default_instance_;
};
// -------------------------------------------------------------------

class HalfOpenBox2i : public ::google::protobuf::Message {
 public:
  HalfOpenBox2i();
  virtual ~HalfOpenBox2i();

  HalfOpenBox2i(const HalfOpenBox2i& from);

  inline HalfOpenBox2i& operator=(const HalfOpenBox2i& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HalfOpenBox2i& default_instance();

  void Swap(HalfOpenBox2i* other);

  // implements Message ----------------------------------------------

  HalfOpenBox2i* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HalfOpenBox2i& from);
  void MergeFrom(const HalfOpenBox2i& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .stereo_export.Vector2i box_min = 1;
  inline bool has_box_min() const;
  inline void clear_box_min();
  static const int kBoxMinFieldNumber = 1;
  inline const ::stereo_export::Vector2i& box_min() const;
  inline ::stereo_export::Vector2i* mutable_box_min();
  inline ::stereo_export::Vector2i* release_box_min();
  inline void set_allocated_box_min(::stereo_export::Vector2i* box_min);

  // optional .stereo_export.Vector2i box_max = 2;
  inline bool has_box_max() const;
  inline void clear_box_max();
  static const int kBoxMaxFieldNumber = 2;
  inline const ::stereo_export::Vector2i& box_max() const;
  inline ::stereo_export::Vector2i* mutable_box_max();
  inline ::stereo_export::Vector2i* release_box_max();
  inline void set_allocated_box_max(::stereo_export::Vector2i* box_max);

  // @@protoc_insertion_point(class_scope:stereo_export.HalfOpenBox2i)
 private:
  inline void set_has_box_min();
  inline void clear_has_box_min();
  inline void set_has_box_max();
  inline void clear_has_box_max();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::stereo_export::Vector2i* box_min_;
  ::stereo_export::Vector2i* box_max_;
  friend void  protobuf_AddDesc_export_5fdata_2eproto();
  friend void protobuf_AssignDesc_export_5fdata_2eproto();
  friend void protobuf_ShutdownFile_export_5fdata_2eproto();

  void InitAsDefaultInstance();
  static HalfOpenBox2i* default_instance_;
};
// -------------------------------------------------------------------

class StereoRasterPoints : public ::google::protobuf::Message {
 public:
  StereoRasterPoints();
  virtual ~StereoRasterPoints();

  StereoRasterPoints(const StereoRasterPoints& from);

  inline StereoRasterPoints& operator=(const StereoRasterPoints& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StereoRasterPoints& default_instance();

  void Swap(StereoRasterPoints* other);

  // implements Message ----------------------------------------------

  StereoRasterPoints* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StereoRasterPoints& from);
  void MergeFrom(const StereoRasterPoints& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 w = 1;
  inline bool has_w() const;
  inline void clear_w();
  static const int kWFieldNumber = 1;
  inline ::google::protobuf::int32 w() const;
  inline void set_w(::google::protobuf::int32 value);

  // required int32 h = 2;
  inline bool has_h() const;
  inline void clear_h();
  static const int kHFieldNumber = 2;
  inline ::google::protobuf::int32 h() const;
  inline void set_h(::google::protobuf::int32 value);

  // required .stereo_export.Vector3d center = 3;
  inline bool has_center() const;
  inline void clear_center();
  static const int kCenterFieldNumber = 3;
  inline const ::stereo_export::Vector3d& center() const;
  inline ::stereo_export::Vector3d* mutable_center();
  inline ::stereo_export::Vector3d* release_center();
  inline void set_allocated_center(::stereo_export::Vector3d* center);

  // repeated .stereo_export.Vector3f points = 4;
  inline int points_size() const;
  inline void clear_points();
  static const int kPointsFieldNumber = 4;
  inline const ::stereo_export::Vector3f& points(int index) const;
  inline ::stereo_export::Vector3f* mutable_points(int index);
  inline ::stereo_export::Vector3f* add_points();
  inline const ::google::protobuf::RepeatedPtrField< ::stereo_export::Vector3f >&
      points() const;
  inline ::google::protobuf::RepeatedPtrField< ::stereo_export::Vector3f >*
      mutable_points();

  // @@protoc_insertion_point(class_scope:stereo_export.StereoRasterPoints)
 private:
  inline void set_has_w();
  inline void clear_has_w();
  inline void set_has_h();
  inline void clear_has_h();
  inline void set_has_center();
  inline void clear_has_center();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 w_;
  ::google::protobuf::int32 h_;
  ::stereo_export::Vector3d* center_;
  ::google::protobuf::RepeatedPtrField< ::stereo_export::Vector3f > points_;
  friend void  protobuf_AddDesc_export_5fdata_2eproto();
  friend void protobuf_AssignDesc_export_5fdata_2eproto();
  friend void protobuf_ShutdownFile_export_5fdata_2eproto();

  void InitAsDefaultInstance();
  static StereoRasterPoints* default_instance_;
};
// -------------------------------------------------------------------

class CameraModel : public ::google::protobuf::Message {
 public:
  CameraModel();
  virtual ~CameraModel();

  CameraModel(const CameraModel& from);

  inline CameraModel& operator=(const CameraModel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CameraModel& default_instance();

  void Swap(CameraModel* other);

  // implements Message ----------------------------------------------

  CameraModel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CameraModel& from);
  void MergeFrom(const CameraModel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .stereo_export.Matrix3x3d r = 1;
  inline bool has_r() const;
  inline void clear_r();
  static const int kRFieldNumber = 1;
  inline const ::stereo_export::Matrix3x3d& r() const;
  inline ::stereo_export::Matrix3x3d* mutable_r();
  inline ::stereo_export::Matrix3x3d* release_r();
  inline void set_allocated_r(::stereo_export::Matrix3x3d* r);

  // optional .stereo_export.Vector3d t = 2;
  inline bool has_t() const;
  inline void clear_t();
  static const int kTFieldNumber = 2;
  inline const ::stereo_export::Vector3d& t() const;
  inline ::stereo_export::Vector3d* mutable_t();
  inline ::stereo_export::Vector3d* release_t();
  inline void set_allocated_t(::stereo_export::Vector3d* t);

  // optional double k1 = 3;
  inline bool has_k1() const;
  inline void clear_k1();
  static const int kK1FieldNumber = 3;
  inline double k1() const;
  inline void set_k1(double value);

  // optional double k2 = 4;
  inline bool has_k2() const;
  inline void clear_k2();
  static const int kK2FieldNumber = 4;
  inline double k2() const;
  inline void set_k2(double value);

  // optional double fx = 5;
  inline bool has_fx() const;
  inline void clear_fx();
  static const int kFxFieldNumber = 5;
  inline double fx() const;
  inline void set_fx(double value);

  // optional double fy = 6;
  inline bool has_fy() const;
  inline void clear_fy();
  static const int kFyFieldNumber = 6;
  inline double fy() const;
  inline void set_fy(double value);

  // optional double fs = 7;
  inline bool has_fs() const;
  inline void clear_fs();
  static const int kFsFieldNumber = 7;
  inline double fs() const;
  inline void set_fs(double value);

  // optional double cx = 8;
  inline bool has_cx() const;
  inline void clear_cx();
  static const int kCxFieldNumber = 8;
  inline double cx() const;
  inline void set_cx(double value);

  // optional double cy = 9;
  inline bool has_cy() const;
  inline void clear_cy();
  static const int kCyFieldNumber = 9;
  inline double cy() const;
  inline void set_cy(double value);

  // @@protoc_insertion_point(class_scope:stereo_export.CameraModel)
 private:
  inline void set_has_r();
  inline void clear_has_r();
  inline void set_has_t();
  inline void clear_has_t();
  inline void set_has_k1();
  inline void clear_has_k1();
  inline void set_has_k2();
  inline void clear_has_k2();
  inline void set_has_fx();
  inline void clear_has_fx();
  inline void set_has_fy();
  inline void clear_has_fy();
  inline void set_has_fs();
  inline void clear_has_fs();
  inline void set_has_cx();
  inline void clear_has_cx();
  inline void set_has_cy();
  inline void clear_has_cy();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::stereo_export::Matrix3x3d* r_;
  ::stereo_export::Vector3d* t_;
  double k1_;
  double k2_;
  double fx_;
  double fy_;
  double fs_;
  double cx_;
  double cy_;
  friend void  protobuf_AddDesc_export_5fdata_2eproto();
  friend void protobuf_AssignDesc_export_5fdata_2eproto();
  friend void protobuf_ShutdownFile_export_5fdata_2eproto();

  void InitAsDefaultInstance();
  static CameraModel* default_instance_;
};
// -------------------------------------------------------------------

class ImageCameraMetadata : public ::google::protobuf::Message {
 public:
  ImageCameraMetadata();
  virtual ~ImageCameraMetadata();

  ImageCameraMetadata(const ImageCameraMetadata& from);

  inline ImageCameraMetadata& operator=(const ImageCameraMetadata& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageCameraMetadata& default_instance();

  void Swap(ImageCameraMetadata* other);

  // implements Message ----------------------------------------------

  ImageCameraMetadata* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ImageCameraMetadata& from);
  void MergeFrom(const ImageCameraMetadata& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string image_path = 1;
  inline bool has_image_path() const;
  inline void clear_image_path();
  static const int kImagePathFieldNumber = 1;
  inline const ::std::string& image_path() const;
  inline void set_image_path(const ::std::string& value);
  inline void set_image_path(const char* value);
  inline void set_image_path(const char* value, size_t size);
  inline ::std::string* mutable_image_path();
  inline ::std::string* release_image_path();
  inline void set_allocated_image_path(::std::string* image_path);

  // optional string image_id = 2;
  inline bool has_image_id() const;
  inline void clear_image_id();
  static const int kImageIdFieldNumber = 2;
  inline const ::std::string& image_id() const;
  inline void set_image_id(const ::std::string& value);
  inline void set_image_id(const char* value);
  inline void set_image_id(const char* value, size_t size);
  inline ::std::string* mutable_image_id();
  inline ::std::string* release_image_id();
  inline void set_allocated_image_id(::std::string* image_id);

  // optional .stereo_export.Vector2i original_size = 3;
  inline bool has_original_size() const;
  inline void clear_original_size();
  static const int kOriginalSizeFieldNumber = 3;
  inline const ::stereo_export::Vector2i& original_size() const;
  inline ::stereo_export::Vector2i* mutable_original_size();
  inline ::stereo_export::Vector2i* release_original_size();
  inline void set_allocated_original_size(::stereo_export::Vector2i* original_size);

  // optional .stereo_export.HalfOpenBox2i bounds = 4;
  inline bool has_bounds() const;
  inline void clear_bounds();
  static const int kBoundsFieldNumber = 4;
  inline const ::stereo_export::HalfOpenBox2i& bounds() const;
  inline ::stereo_export::HalfOpenBox2i* mutable_bounds();
  inline ::stereo_export::HalfOpenBox2i* release_bounds();
  inline void set_allocated_bounds(::stereo_export::HalfOpenBox2i* bounds);

  // optional .stereo_export.CameraModel camera_model = 5;
  inline bool has_camera_model() const;
  inline void clear_camera_model();
  static const int kCameraModelFieldNumber = 5;
  inline const ::stereo_export::CameraModel& camera_model() const;
  inline ::stereo_export::CameraModel* mutable_camera_model();
  inline ::stereo_export::CameraModel* release_camera_model();
  inline void set_allocated_camera_model(::stereo_export::CameraModel* camera_model);

  // @@protoc_insertion_point(class_scope:stereo_export.ImageCameraMetadata)
 private:
  inline void set_has_image_path();
  inline void clear_has_image_path();
  inline void set_has_image_id();
  inline void clear_has_image_id();
  inline void set_has_original_size();
  inline void clear_has_original_size();
  inline void set_has_bounds();
  inline void clear_has_bounds();
  inline void set_has_camera_model();
  inline void clear_has_camera_model();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* image_path_;
  ::std::string* image_id_;
  ::stereo_export::Vector2i* original_size_;
  ::stereo_export::HalfOpenBox2i* bounds_;
  ::stereo_export::CameraModel* camera_model_;
  friend void  protobuf_AddDesc_export_5fdata_2eproto();
  friend void protobuf_AssignDesc_export_5fdata_2eproto();
  friend void protobuf_ShutdownFile_export_5fdata_2eproto();

  void InitAsDefaultInstance();
  static ImageCameraMetadata* default_instance_;
};
// -------------------------------------------------------------------

class StereoRasterMetadata : public ::google::protobuf::Message {
 public:
  StereoRasterMetadata();
  virtual ~StereoRasterMetadata();

  StereoRasterMetadata(const StereoRasterMetadata& from);

  inline StereoRasterMetadata& operator=(const StereoRasterMetadata& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StereoRasterMetadata& default_instance();

  void Swap(StereoRasterMetadata* other);

  // implements Message ----------------------------------------------

  StereoRasterMetadata* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StereoRasterMetadata& from);
  void MergeFrom(const StereoRasterMetadata& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string stereo_raster_path = 1;
  inline bool has_stereo_raster_path() const;
  inline void clear_stereo_raster_path();
  static const int kStereoRasterPathFieldNumber = 1;
  inline const ::std::string& stereo_raster_path() const;
  inline void set_stereo_raster_path(const ::std::string& value);
  inline void set_stereo_raster_path(const char* value);
  inline void set_stereo_raster_path(const char* value, size_t size);
  inline ::std::string* mutable_stereo_raster_path();
  inline ::std::string* release_stereo_raster_path();
  inline void set_allocated_stereo_raster_path(::std::string* stereo_raster_path);

  // optional string image_id = 2;
  inline bool has_image_id() const;
  inline void clear_image_id();
  static const int kImageIdFieldNumber = 2;
  inline const ::std::string& image_id() const;
  inline void set_image_id(const ::std::string& value);
  inline void set_image_id(const char* value);
  inline void set_image_id(const char* value, size_t size);
  inline ::std::string* mutable_image_id();
  inline ::std::string* release_image_id();
  inline void set_allocated_image_id(::std::string* image_id);

  // @@protoc_insertion_point(class_scope:stereo_export.StereoRasterMetadata)
 private:
  inline void set_has_stereo_raster_path();
  inline void clear_has_stereo_raster_path();
  inline void set_has_image_id();
  inline void clear_has_image_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* stereo_raster_path_;
  ::std::string* image_id_;
  friend void  protobuf_AddDesc_export_5fdata_2eproto();
  friend void protobuf_AssignDesc_export_5fdata_2eproto();
  friend void protobuf_ShutdownFile_export_5fdata_2eproto();

  void InitAsDefaultInstance();
  static StereoRasterMetadata* default_instance_;
};
// -------------------------------------------------------------------

class DatasetMetadata : public ::google::protobuf::Message {
 public:
  DatasetMetadata();
  virtual ~DatasetMetadata();

  DatasetMetadata(const DatasetMetadata& from);

  inline DatasetMetadata& operator=(const DatasetMetadata& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DatasetMetadata& default_instance();

  void Swap(DatasetMetadata* other);

  // implements Message ----------------------------------------------

  DatasetMetadata* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DatasetMetadata& from);
  void MergeFrom(const DatasetMetadata& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double latitude_degrees = 1;
  inline bool has_latitude_degrees() const;
  inline void clear_latitude_degrees();
  static const int kLatitudeDegreesFieldNumber = 1;
  inline double latitude_degrees() const;
  inline void set_latitude_degrees(double value);

  // optional double longitude_degrees = 2;
  inline bool has_longitude_degrees() const;
  inline void clear_longitude_degrees();
  static const int kLongitudeDegreesFieldNumber = 2;
  inline double longitude_degrees() const;
  inline void set_longitude_degrees(double value);

  // optional double radius_meters = 3;
  inline bool has_radius_meters() const;
  inline void clear_radius_meters();
  static const int kRadiusMetersFieldNumber = 3;
  inline double radius_meters() const;
  inline void set_radius_meters(double value);

  // repeated .stereo_export.ImageCameraMetadata image_camera = 4;
  inline int image_camera_size() const;
  inline void clear_image_camera();
  static const int kImageCameraFieldNumber = 4;
  inline const ::stereo_export::ImageCameraMetadata& image_camera(int index) const;
  inline ::stereo_export::ImageCameraMetadata* mutable_image_camera(int index);
  inline ::stereo_export::ImageCameraMetadata* add_image_camera();
  inline const ::google::protobuf::RepeatedPtrField< ::stereo_export::ImageCameraMetadata >&
      image_camera() const;
  inline ::google::protobuf::RepeatedPtrField< ::stereo_export::ImageCameraMetadata >*
      mutable_image_camera();

  // repeated .stereo_export.StereoRasterMetadata stereo_raster = 5;
  inline int stereo_raster_size() const;
  inline void clear_stereo_raster();
  static const int kStereoRasterFieldNumber = 5;
  inline const ::stereo_export::StereoRasterMetadata& stereo_raster(int index) const;
  inline ::stereo_export::StereoRasterMetadata* mutable_stereo_raster(int index);
  inline ::stereo_export::StereoRasterMetadata* add_stereo_raster();
  inline const ::google::protobuf::RepeatedPtrField< ::stereo_export::StereoRasterMetadata >&
      stereo_raster() const;
  inline ::google::protobuf::RepeatedPtrField< ::stereo_export::StereoRasterMetadata >*
      mutable_stereo_raster();

  // @@protoc_insertion_point(class_scope:stereo_export.DatasetMetadata)
 private:
  inline void set_has_latitude_degrees();
  inline void clear_has_latitude_degrees();
  inline void set_has_longitude_degrees();
  inline void clear_has_longitude_degrees();
  inline void set_has_radius_meters();
  inline void clear_has_radius_meters();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double latitude_degrees_;
  double longitude_degrees_;
  double radius_meters_;
  ::google::protobuf::RepeatedPtrField< ::stereo_export::ImageCameraMetadata > image_camera_;
  ::google::protobuf::RepeatedPtrField< ::stereo_export::StereoRasterMetadata > stereo_raster_;
  friend void  protobuf_AddDesc_export_5fdata_2eproto();
  friend void protobuf_AssignDesc_export_5fdata_2eproto();
  friend void protobuf_ShutdownFile_export_5fdata_2eproto();

  void InitAsDefaultInstance();
  static DatasetMetadata* default_instance_;
};
// -------------------------------------------------------------------

class Metadata : public ::google::protobuf::Message {
 public:
  Metadata();
  virtual ~Metadata();

  Metadata(const Metadata& from);

  inline Metadata& operator=(const Metadata& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Metadata& default_instance();

  void Swap(Metadata* other);

  // implements Message ----------------------------------------------

  Metadata* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Metadata& from);
  void MergeFrom(const Metadata& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .stereo_export.DatasetMetadata dataset = 1;
  inline int dataset_size() const;
  inline void clear_dataset();
  static const int kDatasetFieldNumber = 1;
  inline const ::stereo_export::DatasetMetadata& dataset(int index) const;
  inline ::stereo_export::DatasetMetadata* mutable_dataset(int index);
  inline ::stereo_export::DatasetMetadata* add_dataset();
  inline const ::google::protobuf::RepeatedPtrField< ::stereo_export::DatasetMetadata >&
      dataset() const;
  inline ::google::protobuf::RepeatedPtrField< ::stereo_export::DatasetMetadata >*
      mutable_dataset();

  // @@protoc_insertion_point(class_scope:stereo_export.Metadata)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::stereo_export::DatasetMetadata > dataset_;
  friend void  protobuf_AddDesc_export_5fdata_2eproto();
  friend void protobuf_AssignDesc_export_5fdata_2eproto();
  friend void protobuf_ShutdownFile_export_5fdata_2eproto();

  void InitAsDefaultInstance();
  static Metadata* default_instance_;
};
// ===================================================================


// ===================================================================

// Vector3d

// optional double x = 1;
inline bool Vector3d::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vector3d::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vector3d::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vector3d::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double Vector3d::x() const {
  // @@protoc_insertion_point(field_get:stereo_export.Vector3d.x)
  return x_;
}
inline void Vector3d::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:stereo_export.Vector3d.x)
}

// optional double y = 2;
inline bool Vector3d::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vector3d::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vector3d::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vector3d::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double Vector3d::y() const {
  // @@protoc_insertion_point(field_get:stereo_export.Vector3d.y)
  return y_;
}
inline void Vector3d::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:stereo_export.Vector3d.y)
}

// optional double z = 3;
inline bool Vector3d::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Vector3d::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Vector3d::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Vector3d::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline double Vector3d::z() const {
  // @@protoc_insertion_point(field_get:stereo_export.Vector3d.z)
  return z_;
}
inline void Vector3d::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:stereo_export.Vector3d.z)
}

// -------------------------------------------------------------------

// Vector3f

// optional float x = 1;
inline bool Vector3f::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vector3f::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vector3f::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vector3f::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Vector3f::x() const {
  // @@protoc_insertion_point(field_get:stereo_export.Vector3f.x)
  return x_;
}
inline void Vector3f::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:stereo_export.Vector3f.x)
}

// optional float y = 2;
inline bool Vector3f::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vector3f::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vector3f::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vector3f::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Vector3f::y() const {
  // @@protoc_insertion_point(field_get:stereo_export.Vector3f.y)
  return y_;
}
inline void Vector3f::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:stereo_export.Vector3f.y)
}

// optional float z = 3;
inline bool Vector3f::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Vector3f::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Vector3f::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Vector3f::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float Vector3f::z() const {
  // @@protoc_insertion_point(field_get:stereo_export.Vector3f.z)
  return z_;
}
inline void Vector3f::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:stereo_export.Vector3f.z)
}

// -------------------------------------------------------------------

// Matrix3x3d

// optional double e00 = 1;
inline bool Matrix3x3d::has_e00() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Matrix3x3d::set_has_e00() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Matrix3x3d::clear_has_e00() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Matrix3x3d::clear_e00() {
  e00_ = 0;
  clear_has_e00();
}
inline double Matrix3x3d::e00() const {
  // @@protoc_insertion_point(field_get:stereo_export.Matrix3x3d.e00)
  return e00_;
}
inline void Matrix3x3d::set_e00(double value) {
  set_has_e00();
  e00_ = value;
  // @@protoc_insertion_point(field_set:stereo_export.Matrix3x3d.e00)
}

// optional double e01 = 2;
inline bool Matrix3x3d::has_e01() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Matrix3x3d::set_has_e01() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Matrix3x3d::clear_has_e01() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Matrix3x3d::clear_e01() {
  e01_ = 0;
  clear_has_e01();
}
inline double Matrix3x3d::e01() const {
  // @@protoc_insertion_point(field_get:stereo_export.Matrix3x3d.e01)
  return e01_;
}
inline void Matrix3x3d::set_e01(double value) {
  set_has_e01();
  e01_ = value;
  // @@protoc_insertion_point(field_set:stereo_export.Matrix3x3d.e01)
}

// optional double e02 = 3;
inline bool Matrix3x3d::has_e02() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Matrix3x3d::set_has_e02() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Matrix3x3d::clear_has_e02() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Matrix3x3d::clear_e02() {
  e02_ = 0;
  clear_has_e02();
}
inline double Matrix3x3d::e02() const {
  // @@protoc_insertion_point(field_get:stereo_export.Matrix3x3d.e02)
  return e02_;
}
inline void Matrix3x3d::set_e02(double value) {
  set_has_e02();
  e02_ = value;
  // @@protoc_insertion_point(field_set:stereo_export.Matrix3x3d.e02)
}

// optional double e10 = 4;
inline bool Matrix3x3d::has_e10() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Matrix3x3d::set_has_e10() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Matrix3x3d::clear_has_e10() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Matrix3x3d::clear_e10() {
  e10_ = 0;
  clear_has_e10();
}
inline double Matrix3x3d::e10() const {
  // @@protoc_insertion_point(field_get:stereo_export.Matrix3x3d.e10)
  return e10_;
}
inline void Matrix3x3d::set_e10(double value) {
  set_has_e10();
  e10_ = value;
  // @@protoc_insertion_point(field_set:stereo_export.Matrix3x3d.e10)
}

// optional double e11 = 5;
inline bool Matrix3x3d::has_e11() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Matrix3x3d::set_has_e11() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Matrix3x3d::clear_has_e11() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Matrix3x3d::clear_e11() {
  e11_ = 0;
  clear_has_e11();
}
inline double Matrix3x3d::e11() const {
  // @@protoc_insertion_point(field_get:stereo_export.Matrix3x3d.e11)
  return e11_;
}
inline void Matrix3x3d::set_e11(double value) {
  set_has_e11();
  e11_ = value;
  // @@protoc_insertion_point(field_set:stereo_export.Matrix3x3d.e11)
}

// optional double e12 = 6;
inline bool Matrix3x3d::has_e12() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Matrix3x3d::set_has_e12() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Matrix3x3d::clear_has_e12() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Matrix3x3d::clear_e12() {
  e12_ = 0;
  clear_has_e12();
}
inline double Matrix3x3d::e12() const {
  // @@protoc_insertion_point(field_get:stereo_export.Matrix3x3d.e12)
  return e12_;
}
inline void Matrix3x3d::set_e12(double value) {
  set_has_e12();
  e12_ = value;
  // @@protoc_insertion_point(field_set:stereo_export.Matrix3x3d.e12)
}

// optional double e20 = 7;
inline bool Matrix3x3d::has_e20() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Matrix3x3d::set_has_e20() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Matrix3x3d::clear_has_e20() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Matrix3x3d::clear_e20() {
  e20_ = 0;
  clear_has_e20();
}
inline double Matrix3x3d::e20() const {
  // @@protoc_insertion_point(field_get:stereo_export.Matrix3x3d.e20)
  return e20_;
}
inline void Matrix3x3d::set_e20(double value) {
  set_has_e20();
  e20_ = value;
  // @@protoc_insertion_point(field_set:stereo_export.Matrix3x3d.e20)
}

// optional double e21 = 8;
inline bool Matrix3x3d::has_e21() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Matrix3x3d::set_has_e21() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Matrix3x3d::clear_has_e21() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Matrix3x3d::clear_e21() {
  e21_ = 0;
  clear_has_e21();
}
inline double Matrix3x3d::e21() const {
  // @@protoc_insertion_point(field_get:stereo_export.Matrix3x3d.e21)
  return e21_;
}
inline void Matrix3x3d::set_e21(double value) {
  set_has_e21();
  e21_ = value;
  // @@protoc_insertion_point(field_set:stereo_export.Matrix3x3d.e21)
}

// optional double e22 = 9;
inline bool Matrix3x3d::has_e22() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Matrix3x3d::set_has_e22() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Matrix3x3d::clear_has_e22() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Matrix3x3d::clear_e22() {
  e22_ = 0;
  clear_has_e22();
}
inline double Matrix3x3d::e22() const {
  // @@protoc_insertion_point(field_get:stereo_export.Matrix3x3d.e22)
  return e22_;
}
inline void Matrix3x3d::set_e22(double value) {
  set_has_e22();
  e22_ = value;
  // @@protoc_insertion_point(field_set:stereo_export.Matrix3x3d.e22)
}

// -------------------------------------------------------------------

// Vector2i

// optional int32 x = 1;
inline bool Vector2i::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vector2i::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vector2i::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vector2i::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 Vector2i::x() const {
  // @@protoc_insertion_point(field_get:stereo_export.Vector2i.x)
  return x_;
}
inline void Vector2i::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:stereo_export.Vector2i.x)
}

// optional int32 y = 2;
inline bool Vector2i::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vector2i::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vector2i::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vector2i::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 Vector2i::y() const {
  // @@protoc_insertion_point(field_get:stereo_export.Vector2i.y)
  return y_;
}
inline void Vector2i::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:stereo_export.Vector2i.y)
}

// -------------------------------------------------------------------

// HalfOpenBox2i

// optional .stereo_export.Vector2i box_min = 1;
inline bool HalfOpenBox2i::has_box_min() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HalfOpenBox2i::set_has_box_min() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HalfOpenBox2i::clear_has_box_min() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HalfOpenBox2i::clear_box_min() {
  if (box_min_ != NULL) box_min_->::stereo_export::Vector2i::Clear();
  clear_has_box_min();
}
inline const ::stereo_export::Vector2i& HalfOpenBox2i::box_min() const {
  // @@protoc_insertion_point(field_get:stereo_export.HalfOpenBox2i.box_min)
  return box_min_ != NULL ? *box_min_ : *default_instance_->box_min_;
}
inline ::stereo_export::Vector2i* HalfOpenBox2i::mutable_box_min() {
  set_has_box_min();
  if (box_min_ == NULL) box_min_ = new ::stereo_export::Vector2i;
  // @@protoc_insertion_point(field_mutable:stereo_export.HalfOpenBox2i.box_min)
  return box_min_;
}
inline ::stereo_export::Vector2i* HalfOpenBox2i::release_box_min() {
  clear_has_box_min();
  ::stereo_export::Vector2i* temp = box_min_;
  box_min_ = NULL;
  return temp;
}
inline void HalfOpenBox2i::set_allocated_box_min(::stereo_export::Vector2i* box_min) {
  delete box_min_;
  box_min_ = box_min;
  if (box_min) {
    set_has_box_min();
  } else {
    clear_has_box_min();
  }
  // @@protoc_insertion_point(field_set_allocated:stereo_export.HalfOpenBox2i.box_min)
}

// optional .stereo_export.Vector2i box_max = 2;
inline bool HalfOpenBox2i::has_box_max() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HalfOpenBox2i::set_has_box_max() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HalfOpenBox2i::clear_has_box_max() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HalfOpenBox2i::clear_box_max() {
  if (box_max_ != NULL) box_max_->::stereo_export::Vector2i::Clear();
  clear_has_box_max();
}
inline const ::stereo_export::Vector2i& HalfOpenBox2i::box_max() const {
  // @@protoc_insertion_point(field_get:stereo_export.HalfOpenBox2i.box_max)
  return box_max_ != NULL ? *box_max_ : *default_instance_->box_max_;
}
inline ::stereo_export::Vector2i* HalfOpenBox2i::mutable_box_max() {
  set_has_box_max();
  if (box_max_ == NULL) box_max_ = new ::stereo_export::Vector2i;
  // @@protoc_insertion_point(field_mutable:stereo_export.HalfOpenBox2i.box_max)
  return box_max_;
}
inline ::stereo_export::Vector2i* HalfOpenBox2i::release_box_max() {
  clear_has_box_max();
  ::stereo_export::Vector2i* temp = box_max_;
  box_max_ = NULL;
  return temp;
}
inline void HalfOpenBox2i::set_allocated_box_max(::stereo_export::Vector2i* box_max) {
  delete box_max_;
  box_max_ = box_max;
  if (box_max) {
    set_has_box_max();
  } else {
    clear_has_box_max();
  }
  // @@protoc_insertion_point(field_set_allocated:stereo_export.HalfOpenBox2i.box_max)
}

// -------------------------------------------------------------------

// StereoRasterPoints

// required int32 w = 1;
inline bool StereoRasterPoints::has_w() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StereoRasterPoints::set_has_w() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StereoRasterPoints::clear_has_w() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StereoRasterPoints::clear_w() {
  w_ = 0;
  clear_has_w();
}
inline ::google::protobuf::int32 StereoRasterPoints::w() const {
  // @@protoc_insertion_point(field_get:stereo_export.StereoRasterPoints.w)
  return w_;
}
inline void StereoRasterPoints::set_w(::google::protobuf::int32 value) {
  set_has_w();
  w_ = value;
  // @@protoc_insertion_point(field_set:stereo_export.StereoRasterPoints.w)
}

// required int32 h = 2;
inline bool StereoRasterPoints::has_h() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StereoRasterPoints::set_has_h() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StereoRasterPoints::clear_has_h() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StereoRasterPoints::clear_h() {
  h_ = 0;
  clear_has_h();
}
inline ::google::protobuf::int32 StereoRasterPoints::h() const {
  // @@protoc_insertion_point(field_get:stereo_export.StereoRasterPoints.h)
  return h_;
}
inline void StereoRasterPoints::set_h(::google::protobuf::int32 value) {
  set_has_h();
  h_ = value;
  // @@protoc_insertion_point(field_set:stereo_export.StereoRasterPoints.h)
}

// required .stereo_export.Vector3d center = 3;
inline bool StereoRasterPoints::has_center() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StereoRasterPoints::set_has_center() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StereoRasterPoints::clear_has_center() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StereoRasterPoints::clear_center() {
  if (center_ != NULL) center_->::stereo_export::Vector3d::Clear();
  clear_has_center();
}
inline const ::stereo_export::Vector3d& StereoRasterPoints::center() const {
  // @@protoc_insertion_point(field_get:stereo_export.StereoRasterPoints.center)
  return center_ != NULL ? *center_ : *default_instance_->center_;
}
inline ::stereo_export::Vector3d* StereoRasterPoints::mutable_center() {
  set_has_center();
  if (center_ == NULL) center_ = new ::stereo_export::Vector3d;
  // @@protoc_insertion_point(field_mutable:stereo_export.StereoRasterPoints.center)
  return center_;
}
inline ::stereo_export::Vector3d* StereoRasterPoints::release_center() {
  clear_has_center();
  ::stereo_export::Vector3d* temp = center_;
  center_ = NULL;
  return temp;
}
inline void StereoRasterPoints::set_allocated_center(::stereo_export::Vector3d* center) {
  delete center_;
  center_ = center;
  if (center) {
    set_has_center();
  } else {
    clear_has_center();
  }
  // @@protoc_insertion_point(field_set_allocated:stereo_export.StereoRasterPoints.center)
}

// repeated .stereo_export.Vector3f points = 4;
inline int StereoRasterPoints::points_size() const {
  return points_.size();
}
inline void StereoRasterPoints::clear_points() {
  points_.Clear();
}
inline const ::stereo_export::Vector3f& StereoRasterPoints::points(int index) const {
  // @@protoc_insertion_point(field_get:stereo_export.StereoRasterPoints.points)
  return points_.Get(index);
}
inline ::stereo_export::Vector3f* StereoRasterPoints::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:stereo_export.StereoRasterPoints.points)
  return points_.Mutable(index);
}
inline ::stereo_export::Vector3f* StereoRasterPoints::add_points() {
  // @@protoc_insertion_point(field_add:stereo_export.StereoRasterPoints.points)
  return points_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::stereo_export::Vector3f >&
StereoRasterPoints::points() const {
  // @@protoc_insertion_point(field_list:stereo_export.StereoRasterPoints.points)
  return points_;
}
inline ::google::protobuf::RepeatedPtrField< ::stereo_export::Vector3f >*
StereoRasterPoints::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:stereo_export.StereoRasterPoints.points)
  return &points_;
}

// -------------------------------------------------------------------

// CameraModel

// optional .stereo_export.Matrix3x3d r = 1;
inline bool CameraModel::has_r() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CameraModel::set_has_r() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CameraModel::clear_has_r() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CameraModel::clear_r() {
  if (r_ != NULL) r_->::stereo_export::Matrix3x3d::Clear();
  clear_has_r();
}
inline const ::stereo_export::Matrix3x3d& CameraModel::r() const {
  // @@protoc_insertion_point(field_get:stereo_export.CameraModel.r)
  return r_ != NULL ? *r_ : *default_instance_->r_;
}
inline ::stereo_export::Matrix3x3d* CameraModel::mutable_r() {
  set_has_r();
  if (r_ == NULL) r_ = new ::stereo_export::Matrix3x3d;
  // @@protoc_insertion_point(field_mutable:stereo_export.CameraModel.r)
  return r_;
}
inline ::stereo_export::Matrix3x3d* CameraModel::release_r() {
  clear_has_r();
  ::stereo_export::Matrix3x3d* temp = r_;
  r_ = NULL;
  return temp;
}
inline void CameraModel::set_allocated_r(::stereo_export::Matrix3x3d* r) {
  delete r_;
  r_ = r;
  if (r) {
    set_has_r();
  } else {
    clear_has_r();
  }
  // @@protoc_insertion_point(field_set_allocated:stereo_export.CameraModel.r)
}

// optional .stereo_export.Vector3d t = 2;
inline bool CameraModel::has_t() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CameraModel::set_has_t() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CameraModel::clear_has_t() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CameraModel::clear_t() {
  if (t_ != NULL) t_->::stereo_export::Vector3d::Clear();
  clear_has_t();
}
inline const ::stereo_export::Vector3d& CameraModel::t() const {
  // @@protoc_insertion_point(field_get:stereo_export.CameraModel.t)
  return t_ != NULL ? *t_ : *default_instance_->t_;
}
inline ::stereo_export::Vector3d* CameraModel::mutable_t() {
  set_has_t();
  if (t_ == NULL) t_ = new ::stereo_export::Vector3d;
  // @@protoc_insertion_point(field_mutable:stereo_export.CameraModel.t)
  return t_;
}
inline ::stereo_export::Vector3d* CameraModel::release_t() {
  clear_has_t();
  ::stereo_export::Vector3d* temp = t_;
  t_ = NULL;
  return temp;
}
inline void CameraModel::set_allocated_t(::stereo_export::Vector3d* t) {
  delete t_;
  t_ = t;
  if (t) {
    set_has_t();
  } else {
    clear_has_t();
  }
  // @@protoc_insertion_point(field_set_allocated:stereo_export.CameraModel.t)
}

// optional double k1 = 3;
inline bool CameraModel::has_k1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CameraModel::set_has_k1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CameraModel::clear_has_k1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CameraModel::clear_k1() {
  k1_ = 0;
  clear_has_k1();
}
inline double CameraModel::k1() const {
  // @@protoc_insertion_point(field_get:stereo_export.CameraModel.k1)
  return k1_;
}
inline void CameraModel::set_k1(double value) {
  set_has_k1();
  k1_ = value;
  // @@protoc_insertion_point(field_set:stereo_export.CameraModel.k1)
}

// optional double k2 = 4;
inline bool CameraModel::has_k2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CameraModel::set_has_k2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CameraModel::clear_has_k2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CameraModel::clear_k2() {
  k2_ = 0;
  clear_has_k2();
}
inline double CameraModel::k2() const {
  // @@protoc_insertion_point(field_get:stereo_export.CameraModel.k2)
  return k2_;
}
inline void CameraModel::set_k2(double value) {
  set_has_k2();
  k2_ = value;
  // @@protoc_insertion_point(field_set:stereo_export.CameraModel.k2)
}

// optional double fx = 5;
inline bool CameraModel::has_fx() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CameraModel::set_has_fx() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CameraModel::clear_has_fx() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CameraModel::clear_fx() {
  fx_ = 0;
  clear_has_fx();
}
inline double CameraModel::fx() const {
  // @@protoc_insertion_point(field_get:stereo_export.CameraModel.fx)
  return fx_;
}
inline void CameraModel::set_fx(double value) {
  set_has_fx();
  fx_ = value;
  // @@protoc_insertion_point(field_set:stereo_export.CameraModel.fx)
}

// optional double fy = 6;
inline bool CameraModel::has_fy() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CameraModel::set_has_fy() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CameraModel::clear_has_fy() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CameraModel::clear_fy() {
  fy_ = 0;
  clear_has_fy();
}
inline double CameraModel::fy() const {
  // @@protoc_insertion_point(field_get:stereo_export.CameraModel.fy)
  return fy_;
}
inline void CameraModel::set_fy(double value) {
  set_has_fy();
  fy_ = value;
  // @@protoc_insertion_point(field_set:stereo_export.CameraModel.fy)
}

// optional double fs = 7;
inline bool CameraModel::has_fs() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CameraModel::set_has_fs() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CameraModel::clear_has_fs() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CameraModel::clear_fs() {
  fs_ = 0;
  clear_has_fs();
}
inline double CameraModel::fs() const {
  // @@protoc_insertion_point(field_get:stereo_export.CameraModel.fs)
  return fs_;
}
inline void CameraModel::set_fs(double value) {
  set_has_fs();
  fs_ = value;
  // @@protoc_insertion_point(field_set:stereo_export.CameraModel.fs)
}

// optional double cx = 8;
inline bool CameraModel::has_cx() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CameraModel::set_has_cx() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CameraModel::clear_has_cx() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CameraModel::clear_cx() {
  cx_ = 0;
  clear_has_cx();
}
inline double CameraModel::cx() const {
  // @@protoc_insertion_point(field_get:stereo_export.CameraModel.cx)
  return cx_;
}
inline void CameraModel::set_cx(double value) {
  set_has_cx();
  cx_ = value;
  // @@protoc_insertion_point(field_set:stereo_export.CameraModel.cx)
}

// optional double cy = 9;
inline bool CameraModel::has_cy() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CameraModel::set_has_cy() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CameraModel::clear_has_cy() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CameraModel::clear_cy() {
  cy_ = 0;
  clear_has_cy();
}
inline double CameraModel::cy() const {
  // @@protoc_insertion_point(field_get:stereo_export.CameraModel.cy)
  return cy_;
}
inline void CameraModel::set_cy(double value) {
  set_has_cy();
  cy_ = value;
  // @@protoc_insertion_point(field_set:stereo_export.CameraModel.cy)
}

// -------------------------------------------------------------------

// ImageCameraMetadata

// optional string image_path = 1;
inline bool ImageCameraMetadata::has_image_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImageCameraMetadata::set_has_image_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImageCameraMetadata::clear_has_image_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImageCameraMetadata::clear_image_path() {
  if (image_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_path_->clear();
  }
  clear_has_image_path();
}
inline const ::std::string& ImageCameraMetadata::image_path() const {
  // @@protoc_insertion_point(field_get:stereo_export.ImageCameraMetadata.image_path)
  return *image_path_;
}
inline void ImageCameraMetadata::set_image_path(const ::std::string& value) {
  set_has_image_path();
  if (image_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_path_ = new ::std::string;
  }
  image_path_->assign(value);
  // @@protoc_insertion_point(field_set:stereo_export.ImageCameraMetadata.image_path)
}
inline void ImageCameraMetadata::set_image_path(const char* value) {
  set_has_image_path();
  if (image_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_path_ = new ::std::string;
  }
  image_path_->assign(value);
  // @@protoc_insertion_point(field_set_char:stereo_export.ImageCameraMetadata.image_path)
}
inline void ImageCameraMetadata::set_image_path(const char* value, size_t size) {
  set_has_image_path();
  if (image_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_path_ = new ::std::string;
  }
  image_path_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:stereo_export.ImageCameraMetadata.image_path)
}
inline ::std::string* ImageCameraMetadata::mutable_image_path() {
  set_has_image_path();
  if (image_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_path_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:stereo_export.ImageCameraMetadata.image_path)
  return image_path_;
}
inline ::std::string* ImageCameraMetadata::release_image_path() {
  clear_has_image_path();
  if (image_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = image_path_;
    image_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ImageCameraMetadata::set_allocated_image_path(::std::string* image_path) {
  if (image_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete image_path_;
  }
  if (image_path) {
    set_has_image_path();
    image_path_ = image_path;
  } else {
    clear_has_image_path();
    image_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:stereo_export.ImageCameraMetadata.image_path)
}

// optional string image_id = 2;
inline bool ImageCameraMetadata::has_image_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImageCameraMetadata::set_has_image_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ImageCameraMetadata::clear_has_image_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ImageCameraMetadata::clear_image_id() {
  if (image_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_id_->clear();
  }
  clear_has_image_id();
}
inline const ::std::string& ImageCameraMetadata::image_id() const {
  // @@protoc_insertion_point(field_get:stereo_export.ImageCameraMetadata.image_id)
  return *image_id_;
}
inline void ImageCameraMetadata::set_image_id(const ::std::string& value) {
  set_has_image_id();
  if (image_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_id_ = new ::std::string;
  }
  image_id_->assign(value);
  // @@protoc_insertion_point(field_set:stereo_export.ImageCameraMetadata.image_id)
}
inline void ImageCameraMetadata::set_image_id(const char* value) {
  set_has_image_id();
  if (image_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_id_ = new ::std::string;
  }
  image_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:stereo_export.ImageCameraMetadata.image_id)
}
inline void ImageCameraMetadata::set_image_id(const char* value, size_t size) {
  set_has_image_id();
  if (image_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_id_ = new ::std::string;
  }
  image_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:stereo_export.ImageCameraMetadata.image_id)
}
inline ::std::string* ImageCameraMetadata::mutable_image_id() {
  set_has_image_id();
  if (image_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:stereo_export.ImageCameraMetadata.image_id)
  return image_id_;
}
inline ::std::string* ImageCameraMetadata::release_image_id() {
  clear_has_image_id();
  if (image_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = image_id_;
    image_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ImageCameraMetadata::set_allocated_image_id(::std::string* image_id) {
  if (image_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete image_id_;
  }
  if (image_id) {
    set_has_image_id();
    image_id_ = image_id;
  } else {
    clear_has_image_id();
    image_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:stereo_export.ImageCameraMetadata.image_id)
}

// optional .stereo_export.Vector2i original_size = 3;
inline bool ImageCameraMetadata::has_original_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ImageCameraMetadata::set_has_original_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ImageCameraMetadata::clear_has_original_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ImageCameraMetadata::clear_original_size() {
  if (original_size_ != NULL) original_size_->::stereo_export::Vector2i::Clear();
  clear_has_original_size();
}
inline const ::stereo_export::Vector2i& ImageCameraMetadata::original_size() const {
  // @@protoc_insertion_point(field_get:stereo_export.ImageCameraMetadata.original_size)
  return original_size_ != NULL ? *original_size_ : *default_instance_->original_size_;
}
inline ::stereo_export::Vector2i* ImageCameraMetadata::mutable_original_size() {
  set_has_original_size();
  if (original_size_ == NULL) original_size_ = new ::stereo_export::Vector2i;
  // @@protoc_insertion_point(field_mutable:stereo_export.ImageCameraMetadata.original_size)
  return original_size_;
}
inline ::stereo_export::Vector2i* ImageCameraMetadata::release_original_size() {
  clear_has_original_size();
  ::stereo_export::Vector2i* temp = original_size_;
  original_size_ = NULL;
  return temp;
}
inline void ImageCameraMetadata::set_allocated_original_size(::stereo_export::Vector2i* original_size) {
  delete original_size_;
  original_size_ = original_size;
  if (original_size) {
    set_has_original_size();
  } else {
    clear_has_original_size();
  }
  // @@protoc_insertion_point(field_set_allocated:stereo_export.ImageCameraMetadata.original_size)
}

// optional .stereo_export.HalfOpenBox2i bounds = 4;
inline bool ImageCameraMetadata::has_bounds() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ImageCameraMetadata::set_has_bounds() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ImageCameraMetadata::clear_has_bounds() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ImageCameraMetadata::clear_bounds() {
  if (bounds_ != NULL) bounds_->::stereo_export::HalfOpenBox2i::Clear();
  clear_has_bounds();
}
inline const ::stereo_export::HalfOpenBox2i& ImageCameraMetadata::bounds() const {
  // @@protoc_insertion_point(field_get:stereo_export.ImageCameraMetadata.bounds)
  return bounds_ != NULL ? *bounds_ : *default_instance_->bounds_;
}
inline ::stereo_export::HalfOpenBox2i* ImageCameraMetadata::mutable_bounds() {
  set_has_bounds();
  if (bounds_ == NULL) bounds_ = new ::stereo_export::HalfOpenBox2i;
  // @@protoc_insertion_point(field_mutable:stereo_export.ImageCameraMetadata.bounds)
  return bounds_;
}
inline ::stereo_export::HalfOpenBox2i* ImageCameraMetadata::release_bounds() {
  clear_has_bounds();
  ::stereo_export::HalfOpenBox2i* temp = bounds_;
  bounds_ = NULL;
  return temp;
}
inline void ImageCameraMetadata::set_allocated_bounds(::stereo_export::HalfOpenBox2i* bounds) {
  delete bounds_;
  bounds_ = bounds;
  if (bounds) {
    set_has_bounds();
  } else {
    clear_has_bounds();
  }
  // @@protoc_insertion_point(field_set_allocated:stereo_export.ImageCameraMetadata.bounds)
}

// optional .stereo_export.CameraModel camera_model = 5;
inline bool ImageCameraMetadata::has_camera_model() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ImageCameraMetadata::set_has_camera_model() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ImageCameraMetadata::clear_has_camera_model() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ImageCameraMetadata::clear_camera_model() {
  if (camera_model_ != NULL) camera_model_->::stereo_export::CameraModel::Clear();
  clear_has_camera_model();
}
inline const ::stereo_export::CameraModel& ImageCameraMetadata::camera_model() const {
  // @@protoc_insertion_point(field_get:stereo_export.ImageCameraMetadata.camera_model)
  return camera_model_ != NULL ? *camera_model_ : *default_instance_->camera_model_;
}
inline ::stereo_export::CameraModel* ImageCameraMetadata::mutable_camera_model() {
  set_has_camera_model();
  if (camera_model_ == NULL) camera_model_ = new ::stereo_export::CameraModel;
  // @@protoc_insertion_point(field_mutable:stereo_export.ImageCameraMetadata.camera_model)
  return camera_model_;
}
inline ::stereo_export::CameraModel* ImageCameraMetadata::release_camera_model() {
  clear_has_camera_model();
  ::stereo_export::CameraModel* temp = camera_model_;
  camera_model_ = NULL;
  return temp;
}
inline void ImageCameraMetadata::set_allocated_camera_model(::stereo_export::CameraModel* camera_model) {
  delete camera_model_;
  camera_model_ = camera_model;
  if (camera_model) {
    set_has_camera_model();
  } else {
    clear_has_camera_model();
  }
  // @@protoc_insertion_point(field_set_allocated:stereo_export.ImageCameraMetadata.camera_model)
}

// -------------------------------------------------------------------

// StereoRasterMetadata

// optional string stereo_raster_path = 1;
inline bool StereoRasterMetadata::has_stereo_raster_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StereoRasterMetadata::set_has_stereo_raster_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StereoRasterMetadata::clear_has_stereo_raster_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StereoRasterMetadata::clear_stereo_raster_path() {
  if (stereo_raster_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stereo_raster_path_->clear();
  }
  clear_has_stereo_raster_path();
}
inline const ::std::string& StereoRasterMetadata::stereo_raster_path() const {
  // @@protoc_insertion_point(field_get:stereo_export.StereoRasterMetadata.stereo_raster_path)
  return *stereo_raster_path_;
}
inline void StereoRasterMetadata::set_stereo_raster_path(const ::std::string& value) {
  set_has_stereo_raster_path();
  if (stereo_raster_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stereo_raster_path_ = new ::std::string;
  }
  stereo_raster_path_->assign(value);
  // @@protoc_insertion_point(field_set:stereo_export.StereoRasterMetadata.stereo_raster_path)
}
inline void StereoRasterMetadata::set_stereo_raster_path(const char* value) {
  set_has_stereo_raster_path();
  if (stereo_raster_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stereo_raster_path_ = new ::std::string;
  }
  stereo_raster_path_->assign(value);
  // @@protoc_insertion_point(field_set_char:stereo_export.StereoRasterMetadata.stereo_raster_path)
}
inline void StereoRasterMetadata::set_stereo_raster_path(const char* value, size_t size) {
  set_has_stereo_raster_path();
  if (stereo_raster_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stereo_raster_path_ = new ::std::string;
  }
  stereo_raster_path_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:stereo_export.StereoRasterMetadata.stereo_raster_path)
}
inline ::std::string* StereoRasterMetadata::mutable_stereo_raster_path() {
  set_has_stereo_raster_path();
  if (stereo_raster_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stereo_raster_path_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:stereo_export.StereoRasterMetadata.stereo_raster_path)
  return stereo_raster_path_;
}
inline ::std::string* StereoRasterMetadata::release_stereo_raster_path() {
  clear_has_stereo_raster_path();
  if (stereo_raster_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = stereo_raster_path_;
    stereo_raster_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void StereoRasterMetadata::set_allocated_stereo_raster_path(::std::string* stereo_raster_path) {
  if (stereo_raster_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete stereo_raster_path_;
  }
  if (stereo_raster_path) {
    set_has_stereo_raster_path();
    stereo_raster_path_ = stereo_raster_path;
  } else {
    clear_has_stereo_raster_path();
    stereo_raster_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:stereo_export.StereoRasterMetadata.stereo_raster_path)
}

// optional string image_id = 2;
inline bool StereoRasterMetadata::has_image_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StereoRasterMetadata::set_has_image_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StereoRasterMetadata::clear_has_image_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StereoRasterMetadata::clear_image_id() {
  if (image_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_id_->clear();
  }
  clear_has_image_id();
}
inline const ::std::string& StereoRasterMetadata::image_id() const {
  // @@protoc_insertion_point(field_get:stereo_export.StereoRasterMetadata.image_id)
  return *image_id_;
}
inline void StereoRasterMetadata::set_image_id(const ::std::string& value) {
  set_has_image_id();
  if (image_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_id_ = new ::std::string;
  }
  image_id_->assign(value);
  // @@protoc_insertion_point(field_set:stereo_export.StereoRasterMetadata.image_id)
}
inline void StereoRasterMetadata::set_image_id(const char* value) {
  set_has_image_id();
  if (image_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_id_ = new ::std::string;
  }
  image_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:stereo_export.StereoRasterMetadata.image_id)
}
inline void StereoRasterMetadata::set_image_id(const char* value, size_t size) {
  set_has_image_id();
  if (image_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_id_ = new ::std::string;
  }
  image_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:stereo_export.StereoRasterMetadata.image_id)
}
inline ::std::string* StereoRasterMetadata::mutable_image_id() {
  set_has_image_id();
  if (image_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:stereo_export.StereoRasterMetadata.image_id)
  return image_id_;
}
inline ::std::string* StereoRasterMetadata::release_image_id() {
  clear_has_image_id();
  if (image_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = image_id_;
    image_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void StereoRasterMetadata::set_allocated_image_id(::std::string* image_id) {
  if (image_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete image_id_;
  }
  if (image_id) {
    set_has_image_id();
    image_id_ = image_id;
  } else {
    clear_has_image_id();
    image_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:stereo_export.StereoRasterMetadata.image_id)
}

// -------------------------------------------------------------------

// DatasetMetadata

// optional double latitude_degrees = 1;
inline bool DatasetMetadata::has_latitude_degrees() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DatasetMetadata::set_has_latitude_degrees() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DatasetMetadata::clear_has_latitude_degrees() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DatasetMetadata::clear_latitude_degrees() {
  latitude_degrees_ = 0;
  clear_has_latitude_degrees();
}
inline double DatasetMetadata::latitude_degrees() const {
  // @@protoc_insertion_point(field_get:stereo_export.DatasetMetadata.latitude_degrees)
  return latitude_degrees_;
}
inline void DatasetMetadata::set_latitude_degrees(double value) {
  set_has_latitude_degrees();
  latitude_degrees_ = value;
  // @@protoc_insertion_point(field_set:stereo_export.DatasetMetadata.latitude_degrees)
}

// optional double longitude_degrees = 2;
inline bool DatasetMetadata::has_longitude_degrees() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DatasetMetadata::set_has_longitude_degrees() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DatasetMetadata::clear_has_longitude_degrees() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DatasetMetadata::clear_longitude_degrees() {
  longitude_degrees_ = 0;
  clear_has_longitude_degrees();
}
inline double DatasetMetadata::longitude_degrees() const {
  // @@protoc_insertion_point(field_get:stereo_export.DatasetMetadata.longitude_degrees)
  return longitude_degrees_;
}
inline void DatasetMetadata::set_longitude_degrees(double value) {
  set_has_longitude_degrees();
  longitude_degrees_ = value;
  // @@protoc_insertion_point(field_set:stereo_export.DatasetMetadata.longitude_degrees)
}

// optional double radius_meters = 3;
inline bool DatasetMetadata::has_radius_meters() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DatasetMetadata::set_has_radius_meters() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DatasetMetadata::clear_has_radius_meters() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DatasetMetadata::clear_radius_meters() {
  radius_meters_ = 0;
  clear_has_radius_meters();
}
inline double DatasetMetadata::radius_meters() const {
  // @@protoc_insertion_point(field_get:stereo_export.DatasetMetadata.radius_meters)
  return radius_meters_;
}
inline void DatasetMetadata::set_radius_meters(double value) {
  set_has_radius_meters();
  radius_meters_ = value;
  // @@protoc_insertion_point(field_set:stereo_export.DatasetMetadata.radius_meters)
}

// repeated .stereo_export.ImageCameraMetadata image_camera = 4;
inline int DatasetMetadata::image_camera_size() const {
  return image_camera_.size();
}
inline void DatasetMetadata::clear_image_camera() {
  image_camera_.Clear();
}
inline const ::stereo_export::ImageCameraMetadata& DatasetMetadata::image_camera(int index) const {
  // @@protoc_insertion_point(field_get:stereo_export.DatasetMetadata.image_camera)
  return image_camera_.Get(index);
}
inline ::stereo_export::ImageCameraMetadata* DatasetMetadata::mutable_image_camera(int index) {
  // @@protoc_insertion_point(field_mutable:stereo_export.DatasetMetadata.image_camera)
  return image_camera_.Mutable(index);
}
inline ::stereo_export::ImageCameraMetadata* DatasetMetadata::add_image_camera() {
  // @@protoc_insertion_point(field_add:stereo_export.DatasetMetadata.image_camera)
  return image_camera_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::stereo_export::ImageCameraMetadata >&
DatasetMetadata::image_camera() const {
  // @@protoc_insertion_point(field_list:stereo_export.DatasetMetadata.image_camera)
  return image_camera_;
}
inline ::google::protobuf::RepeatedPtrField< ::stereo_export::ImageCameraMetadata >*
DatasetMetadata::mutable_image_camera() {
  // @@protoc_insertion_point(field_mutable_list:stereo_export.DatasetMetadata.image_camera)
  return &image_camera_;
}

// repeated .stereo_export.StereoRasterMetadata stereo_raster = 5;
inline int DatasetMetadata::stereo_raster_size() const {
  return stereo_raster_.size();
}
inline void DatasetMetadata::clear_stereo_raster() {
  stereo_raster_.Clear();
}
inline const ::stereo_export::StereoRasterMetadata& DatasetMetadata::stereo_raster(int index) const {
  // @@protoc_insertion_point(field_get:stereo_export.DatasetMetadata.stereo_raster)
  return stereo_raster_.Get(index);
}
inline ::stereo_export::StereoRasterMetadata* DatasetMetadata::mutable_stereo_raster(int index) {
  // @@protoc_insertion_point(field_mutable:stereo_export.DatasetMetadata.stereo_raster)
  return stereo_raster_.Mutable(index);
}
inline ::stereo_export::StereoRasterMetadata* DatasetMetadata::add_stereo_raster() {
  // @@protoc_insertion_point(field_add:stereo_export.DatasetMetadata.stereo_raster)
  return stereo_raster_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::stereo_export::StereoRasterMetadata >&
DatasetMetadata::stereo_raster() const {
  // @@protoc_insertion_point(field_list:stereo_export.DatasetMetadata.stereo_raster)
  return stereo_raster_;
}
inline ::google::protobuf::RepeatedPtrField< ::stereo_export::StereoRasterMetadata >*
DatasetMetadata::mutable_stereo_raster() {
  // @@protoc_insertion_point(field_mutable_list:stereo_export.DatasetMetadata.stereo_raster)
  return &stereo_raster_;
}

// -------------------------------------------------------------------

// Metadata

// repeated .stereo_export.DatasetMetadata dataset = 1;
inline int Metadata::dataset_size() const {
  return dataset_.size();
}
inline void Metadata::clear_dataset() {
  dataset_.Clear();
}
inline const ::stereo_export::DatasetMetadata& Metadata::dataset(int index) const {
  // @@protoc_insertion_point(field_get:stereo_export.Metadata.dataset)
  return dataset_.Get(index);
}
inline ::stereo_export::DatasetMetadata* Metadata::mutable_dataset(int index) {
  // @@protoc_insertion_point(field_mutable:stereo_export.Metadata.dataset)
  return dataset_.Mutable(index);
}
inline ::stereo_export::DatasetMetadata* Metadata::add_dataset() {
  // @@protoc_insertion_point(field_add:stereo_export.Metadata.dataset)
  return dataset_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::stereo_export::DatasetMetadata >&
Metadata::dataset() const {
  // @@protoc_insertion_point(field_list:stereo_export.Metadata.dataset)
  return dataset_;
}
inline ::google::protobuf::RepeatedPtrField< ::stereo_export::DatasetMetadata >*
Metadata::mutable_dataset() {
  // @@protoc_insertion_point(field_mutable_list:stereo_export.Metadata.dataset)
  return &dataset_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace stereo_export

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_export_5fdata_2eproto__INCLUDED
